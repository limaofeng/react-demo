type Query {
  dummy: Int
}

type Mutation {
  dummy: Int
}

type Subscription {
  dummy: Int
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
interface SubscriptionInfo {
  type: SubscriptionType
  data: Entity
}

enum SubscriptionType {
  CREATE
  UPDATE
  DELETE
}

interface EdgeType {
  # 游标位置
  cursor: String
  # 数据
  node: Entity
}

# 分页信息
type PageInfo {
  # 开始位置
  startCursor: String
  # 结束位置
  endCursor: String
  # 是否存在下一页
  hasNextPage: Boolean
}

interface Connection {
  # 总数据条数
  totalCount: Int
  # 分页信息
  pageInfo: PageInfo!
  # 原数据
  edges: [EdgeType]
}

interface Pagination {
  # 总数据条数
  count: Int
  # 每页数据条数
  per_page: Int
  # 总页数
  total: Int
  # 当前页
  page: Int
  # 数据集
  items: [Entity]
}

enum Sex {
  # 男
  male
  # 女
  female
  # 未知
  unknown
}

enum Delflag {
  #已删除
  Y
  # 未删除
  N
}

interface Entity {
  # 预留字段ID
  uuid: String
  # 创建人
  creator: String
  # 修改人
  modifier: String
  # 创建时间
  createTime: Date
  # 修改时间
  modifyTime: Date
}

interface FileEntity {
  # 路径
  path: String
  # 文件名
  name: String
  # 扩展名
  ext: String
  # 文件类型
  contentType: String
  # 文件备注
  description: String
  # 文件大小
  size: String
  key: String
}

enum SortOrder {
  asc
  desc
}

input Sort {
  field: String
  order: SortOrder
}

enum MatchType {
  # 等于
  equal
  # 模糊查询
  like
  # 小于
  lessThan
  # 大于
  greaterThan
  # 小于等于
  lessEqual
  # 大于等于
  greaterEqual
  # in
  in
  # not in
  notIn
  # 不等于
  notEqual
  # is null
  isNull
  # not null
  notNull
  empty
  notEmpty
  between
}

input Filter {
  field: String
  matchType: MatchType
  value: [String]
}

input FileInput {
  # 路径
  path: String
  # 文件名
  name: String
  # 扩展名
  ext: String
  # 文件类型
  contentType: String
  # 文件备注
  description: String
  # 文件大小
  size: String
  key: String
}

enum Void {
  success
}

# 仓库操作
enum StoreOperation {
  # 加
  ADD
  # 减
  SUB
}

# 文件
type File {
  # 路径
  path: String
  # 文件名
  name: String
  # 文件大小
  size: String
  # 扩展名
  ext: String
  # 文件类型
  contentType: String
  # 文件备注
  description: String
}

type Image {
  # 路径 注意格式为 120x120
  path(size: String): String
  # 文件名
  name: String
  # 扩展名
  ext: String
  # 文件类型
  contentType: String
  # 文件备注
  description: String
  # 文件大小
  size: String
}

enum AreaTag {
  state
  city
  region
}

# 区域
type Area implements Entity {
  id: String
  name: String
  displayName: String
  path: String
  tags: [String]
  layer: Int
  parentId: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type Address {
  street: String
  city: String
  state: String
  zip: String
  country: String
  area: Area
  addr: String
}

input AddressInput {
  area: String!
  addr: String!
}

# 布尔响应
type BooleanResponse {
  success: Boolean
  value: String
}

type AreaConnection implements Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Area]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [AreaWrapper]
}

type AreaWrapper implements EdgeType {
  cursor: String
  node: Area
}

extend type Query {
  areas(limit: Int, tags: [AreaTag]): [Area]
  areaConnection(page: Int, pageSize: Int, sort: Sort, filters: [Filter]): [AreaConnection]
}
# 通话记录分页
type CallRecordConnection implements Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [CallRecord]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [CallRecordWrapper]
}

type CallRecordWrapper implements EdgeType {
  cursor: String
  node: CallRecord
}

# 通话记录
type CallRecord implements Entity {
  id: ID
  callSheetId: ID
  callId: ID
  # 呼叫类型
  callType: CallType
  # 主叫号码
  callNo: String
  # 被叫号码
  calledNo: String
  # 开始呼叫时间
  ringTime: Date
  # 铃时间
  ringingTime: Date
  # 摘机接通时间
  beginTime: Date
  # 通话结束时间
  endTime: Date
  # 呼入来电进入技能组时间
  queueTime: Date
  # 呼入来电进入的技能组
  queue: String
  # 座席登录名
  agent: String
  # 座席工号
  exten: String
  # 通话记录状态
  state: CallState
  # 录音文件链接地址
  monitorFileName: String
  # 通话录音文件名
  recordFile: String
  # 账户所在的pbx
  pbx: String
  # 座席姓名
  agentName: String
  # 事件状态
  callState: CallEventState
  # 省份
  province: String
  # 市区
  district: String
  # ivr按键值
  ivrKey: String
  # 通话记录的id
  personId: String
  # 地址
  address: String
  # 满意度调查
  surveyContent: String
  # 通话时间 秒
  interflow_time: Int
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 工单
type CallWorkOrder implements Entity {
  # 编号
  id: ID
  # 客户姓名
  customerName: String
  # 客户类型:0体验中心用户， 1体验馆用户， 2其他
  customerType: Int
  # 性别 0男 1女
  sex: Int
  # 联系电话
  mobile: String
  # 客户地址
  customerAddress: String
  # 工作单位
  workUnit: String
  # 来电号码
  callMobile: String
  # 来电时间
  callTime: Date
  # 呼叫类型
  callType: Int
  # 坐席
  seat: String
  # 工作编号
  workNum: String
  # 工单状态：0已完成， 1待处理
  workStatus: Int
  # 工单类型：0投诉， 1预约， 2咨询， 3养生， 4其他， 5合作
  workType: Int
  # 创建人
  creator: String
  # 受理人
  disposePerson: String
  # 受理时间
  disposeTime: Date
  # 问题描述
  question: String
  # 处理方法
  disposeMethod: String
  uuid: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type CallWorkOrderConnection implements Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [CallWorkOrder]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [CallWorkOrderWrapper]
}

type CallWorkOrderWrapper implements EdgeType {
  cursor: String
  node: CallWorkOrder
}

# 工单历史
type CallWorkOrderHistory {
  id: ID
  # 是否指派：0是， 1否
  assign: Int
  # 是否回访：0是， 1否
  visit: Int
  # 回访人
  visitPerson: String
  # 回访电话
  visitMobile: String
  # 回访日期
  visitTime: Date
  # 回访记录
  visitRecord: String
  # 处理方法
  disposeMethod: String
  # 工单ID
  workSingleId: ID
}

# 呼叫类型
enum CallType {
  # 普通来电
  normal
  # 外呼通话
  dialout
  # 转接电话
  transfer
  # 外呼转接
  dialtransfer
}

# 通话记录状态
enum CallState {
  # 已接听
  dealing
  # 振铃未接听
  notDeal
  # 已留言
  voicemail
  # 黑名单
  blackList
  # 排队放弃
  queueLeak
  # ivr
  leak
  Unlink
}

# 事件状态
enum CallEventState {
  Ring
  Ringing
  Link
  Hangup
  Unlink
}

input CallWorkOrderInput {
  customerName: String
  customerType: Int
  sex: Int
  mobile: String
  customerAddress: String
  workUnit: String
  callMobile: String
  callTime: String
  callType: Int
  seat: String
  workNum: String
  workStatus: Int
  workType: Int
  creator: String
  disposePerson: String
  disposeTime: String
  question: String
  disposeMethod: String
}

input CallWorkOrderHistoryInput {
  assign: Int
  visit: Int
  visitPerson: String
  visitMobile: String
  visitTime: String
  visitRecord: String
  disposeMethod: String
  workSingleId: ID
}

extend type Mutation {
  # 新增工单
  submitCallWorkOrder(entity: CallWorkOrderInput!): CallWorkOrder
  # 更新工单
  updateCallWorkOrder(id: ID!, entity: CallWorkOrderInput!): CallWorkOrder
  # 新增工单历史
  submitCallWorkOrderHistory(entity: CallWorkOrderHistoryInput!): CallWorkOrderHistory
  # 更新工单历史
  updateCallWorkOrderHistory(id: ID!, entity: CallWorkOrderHistoryInput!): CallWorkOrderHistory
}

extend type Query {
  # 通话记录分页
  callRecordConnection(
    page: Int
    offset: Int
    limit: Int
    filters: [Filter]
    pageSize: Int
    sort: Sort
  ): CallRecordConnection
  callWorkOrderConnection(
    page: Int
    offset: Int
    limit: Int
    filters: [Filter]
    pageSize: Int
    sort: Sort
  ): CallWorkOrderConnection
  # 工单
  callWorkOrder(id: ID!): CallWorkOrder
  # 工单历史列表
  callWorkOrderHistorys(workOrderHistoryId: ID, workOrderId: ID): [CallWorkOrderHistory]
}
type DocumentConnection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Document]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [DocumentWrapper]
}

type DocumentWrapper {
  cursor: String
  node: Document
}

# 健康档案
type Document {
  # 健康档案编号
  id: Int
  # 健康档案编码
  sn: String
  # 健康档案code值
  code: String
  # 标题
  title: String
  # 记录时间
  storyTime: Date
  # 记录编号
  recordId: Int
  record: Record
  # 证候对象
  model: Model
  # 健康建议
  healthAdvice: String
  uuid: String
}

type RecordConnection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Record]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [RecordWrapper]
}

type RecordWrapper {
  cursor: String
  node: Record
}

# 档案记录
type Record {
  # 记录编号
  id: Int
  # 记录编码
  no: String
  # 编码
  sn: String
  # 类型
  type: Int
  # 展示时间
  displayTime: Date
  # 简介
  summary: String
  # 人员编号
  personId: ID
  # 人员对象
  person: Person
  # 医生
  doctor: Doctor
  # 药物
  medical: Medical
  # 处方信息
  prescription: PrescriptionDetail
  # 订单
  order: Order
  # 证素
  elements: [Element]
  # 证候
  model: Model
  # 证型
  faces: [Face]
  # 经络仪分析
  merdian: JSON
  # 检测
  examination: Examination
  # 体脂
  bodyfat: Bodyfat
  # 体温
  temperature: Temperature
  # 血氧
  oxygen: Oxygen
  # 身高体重bmi
  bmi: Bmi
  # 血型
  blood: Sugar
  # 血压
  pressure: Pressure
  # 儿童信息
  childinfo: Child
  # 儿童评估
  childevaluation: String
  # 体质结果
  constitution: Constitution
  # 脏腑辩证
  symptom: RecordSymptom
}

# 体质结果
type Constitution {
  # 主体质结果
  constitutionItem1: String
  # 主体质体质特征
  constitutionProperty1: String
  # 主体质调理建议
  constitutionAdvise1: String
  # 辅体质结果
  constitutionItem2: String
  # 辅体质体质特征
  constitutionProperty2: String
  # 辅体质调理建议
  constitutionAdvise2: String
}

# 脏腑辩证
type RecordSymptom {
  # 脏腑辩证 1
  symptomType_0: String
  # 脏腑辩证 1 处方
  symptomContent_0: String
  symptomType_1: String
  symptomContent_1: String
  symptomType_2: String
  symptomContent_2: String
  symptomType_3: String
  symptomContent_3: String
  symptomType_4: String
  symptomContent_4: String
}

# 处方详情
type PrescriptionDetail {
  # 开药类型
  medicineType: String
  prescriptionId: String
  # 用药说明
  notes: String
  # 贴数
  quantity: Int
  # 金额
  money: Float
  medicines: [MedicineDetail]
}

# 药单详情
type MedicineDetail {
  # 药材ID
  medicineId: ID
  # 药材名称
  medicineName: String
  # 药材用量
  quantity: Int
  # 单位
  unit: String
  # 金额
  price: Float
}

# 药单信息
type Medical {
  # 证型
  clinical: String
  # 病情诊断描述
  notes: String
  # 诊断
  diagnose: String
  # 药单ID
  medicalId: ID
  # 时间
  time: String
}

# 检测
type Examination {
  # 医疗介绍
  medicalInstitution: String
  images: [String]
  remarks: String
}

# 儿童信息
type Child {
  # 身高
  height: Float
  # 体重
  weight: Float
  # 头围长度
  head: Float
  # 胸围长度
  chest: Float
  # 牙齿颗数
  teeth: Int
  # 儿童年龄
  pediatricage: String
}

# 血氧
type Oxygen {
  # 血氧
  spo: String
  # 常见原因
  commonCause: String
  # 评估结果
  detail: String
  # 健康建议
  healthAdvice: String
}

# 血糖
type Sugar {
  # 测试状态
  testStatus: Int
  # 健康建议
  healthAdvice: String
  # 常见原因
  commonCause: String
  # 测试血糖
  blSugar: String
  # 标准血糖范围
  stSugar: String
  # 明细
  detail: String
}

# 体脂
type Bodyfat {
  # 体脂值
  pbf: String
  # 新陈代谢数值
  metabolism: String
  # 常见原因
  commonCause: String
  # 评估结果
  detail: String
  # 健康建议
  healthAdvice: String
  tzzs: String
}

# 体温
type Temperature {
  # 体温
  temperature: Float
  # 常见原因
  commonCause: String
  # 评估结果
  detail: String
  # 健康建议
  healthAdvice: String
}

# 血压
type Pressure {
  # 收缩压
  scPressure: Int
  # 舒张压
  dcPressure: Int
  # 脉率
  pr: Int
  # 常见原因
  commonCause: String
  # 评估结果
  detail: String
  # 健康建议
  healthAdvice: String
}

# 身高体重bmi
type Bmi {
  # 身高
  height: Int
  # 体重
  weight: Int
  # bmi指数
  bmi: Int
}

# 健康信息
type HealthInformation {
  # 身高体重bmi
  bmi: Bmi
  # 设备数据  用做存第三方同步来的数据
  deviceData: DeviceData
  # 体脂
  bodyfat: Bodyfat
  # 体温
  temperature: Temperature
  # 血压
  pressure: Pressure
  # 血糖
  sugar: Sugar
  # 血氧
  oxygen: Oxygen
  # 体质评估
  physiqueEstimate: String
  # 未病检测评估
  undiseasedEstimate: String
}

# 设备数据
type DeviceData {
  stepNum: Int
}

# 证素
type Element {
  # 编号
  id: Int
  # 编码
  code: Int
  # 证素名称
  name: String
  # 疾病分类编码
  diseaseCategoryCode: String
  # 疾病类型
  diseaseType: String
  # 搜索编码
  searchCode: String
  # 别名
  alias: String
  # 值
  value: Int
}

# 辩证自诊
type Diag {
  faces: [Face]
  models: Model
  elements: [Element]
}

# 辩证权重
type Scale {
  type: String
  cause: [String]
  result: Int
  weight: [String]
}

# 证候
type Model {
  # 编号
  id: Int
  # 编码
  code: Int
  # 证候名称
  name: String
  # 疾病分类
  diseaseCategoryCode: Int
  # 疾病类型
  diseaseType: String
  # 搜索编码
  searchCode: String
}

# 证型
type Face {
  # 证素编号
  id: Int
  # 证素编码
  code: Int
  # 证素名称
  name: String
  # 疾病分类编码
  diseaseCategoryCode: Int
  # 疾病类型
  diseaseType: String
  # 搜索编码
  searchCode: String
}

type HealthTaskSubTask {
  sid: ID
  title: String
  summary: String
  status: HealthSubTaskStatus
  activetime: String
}

type HealthTaskStep {
  day: Int
  tasks: [HealthTaskSubTask]
}

enum HealthSubTaskStatus {
  invalid
  finished
  nofinished
}

enum PersonHealthTaskStatus {
  inprocess
  finished
}

type PersonHealthTask implements Entity {
  id: ID
  person: Person
  healthtask: HealthTask
  status: PersonHealthTaskStatus
  today: Int
  records: [HealthtaskRecord]
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 关爱计划
type CarePlan implements Entity {
  id: ID
  # 计划名称
  name: String
  # 价格
  price: String
  # 计划内容
  content: String
  # 服务期限
  timeInService: Int
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type CareCardBatch implements Entity {
  id: ID
  # 卡号
  no: String
  # 批次名称
  name: String
  #数量
  quantity: Int
  # 关爱计划ID
  careplan: JSON
  # 状态
  status: String
  # 激活码
  secret: String
  # 批次号
  batchNo: String
  # 激活时间
  activatedate: Date
  # 有效时间
  effectivedate: Date
  person: Person
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type CareCardBatchConnection implements Pagination, Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [CareCardBatch]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [CareCardBatchWrapper]
}

type CareCardBatchWrapper implements EdgeType {
  cursor: String
  node: Person
}

#养生计划
type HealthTask implements Entity {
  id: ID
  name: String
  days: Int
  steps: [HealthTaskStep]
  # 该字段只在通过 person 调用时有效
  current: PersonHealthTask
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

#养生计划
type HealthtaskRecord implements Entity {
  id: ID
  doday: Int
  status: HealthSubTaskStatus
  tasks: [HealthTaskSubTask]
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# @deprecated 健康储蓄明细对象
type HealthStoreItem implements Entity {
  # 健康储蓄编号
  id: ID
  # 饮食储蓄
  diet: String
  # 抽烟储蓄
  smoke: String
  # 饮酒储蓄
  drink: String
  # 运动储蓄
  sport: String
  # 睡眠储蓄
  sleep: String
  # 味觉
  taste: String
  eat: String
  deposit: HealthStore
  # 记录时间
  storyTime: Date
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# @deprecated
type HealthStore implements Entity {
  # 编号
  id: ID
  # 档案人对象
  person: Person
  # 得分
  score: Int
  today: HealthStoreItem
  # 健康储蓄明细
  items(filters: [Filter]): [HealthStoreItem]
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 健康日记
type HealthDiary implements Entity {
  id: ID
  # 时间
  storyTime: String
  # 得分
  score: Int
  depositId: ID
  # 睡眠
  sleep: String
  # 口味
  taste: String
  # 吸烟
  smoke: String
  # 早餐
  eat: String
  # 素食
  diet: String
  # 运动
  sport: String
  # 喝酒
  drink: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type Person implements Entity {
  # 档案人编号
  id: ID
  # 会员ID
  memberId: ID
  # 会员信息
  personal: Personal
  # 编码
  no: String
  # 类型
  type: String
  # 档案列表
  documents: [Document]
  # 名称
  name: String
  # 手机号
  phone: String
  # 生日
  birthday: String
  # 出生时间
  birthtime: String
  # 用户头像
  avatar: Image
  # 性别
  sex: String
  # 状态
  status: String
  # 身份证
  idcard: String
  # 年龄
  age: Int
  # 慢性病
  chronic: String
  # 职业
  occupation: String
  #健康储蓄对象
  healthStore: HealthStore
  healthTasks: [HealthTask]
  healthTaskLogs(status: HealthSubTaskStatus): [PersonHealthTask]
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type PersonWrapper implements EdgeType {
  cursor: String
  node: Person
}

type PersonConnection implements Pagination, Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Person]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [PersonWrapper]
}

# 症候分类
type DiagnosisCategory {
  id: ID
  code: String
  name: String
  searchCode: String
  part: String
  diagnosisDiseases: [DiagnosisDisease]
}

# 症候
type DiagnosisDisease {
  id: ID
  code: String
  name: String
  categoryId: Int
  categoryCode: String
  categoryName: String
  categorySearchCode: String
  categoryPart: String
  diseaseCategoryCode: String
  diseaseType: String
  searchCode: String
  value: Int
  level: String
}

type DiagnosisAnalysis {
  # 症候
  elements: [DiagnosisDisease]
  # 症素
  faces: [DiagnosisDisease]
  # 症型
  model: Model
}

# 卦象 内容看不懂不做注解
type Divination {
  # 生日
  birthday: String
  # 年计算的年干
  year: String
  # 月计算的天干
  month: String
  # 天计算的年干
  day: String
  # 根据天干地支算出来的五运
  wuyun: [String]
  # 根据天干地支算出来的卦象
  name: String
  # 根据时间算出来的天干地支
  time: String
  # 根据天干地支算出来的
  SixQi: [String]
  # 卦象的key
  key: String
  # 节气
  jieqi: String
  # 节气的key
  solarTerms: String
}

# 好运茶
type LuckyTea {
  # 茶
  name: [String]
  key: [String]
}

# 当前时辰的天干地支
type NowTgdz {
  # 例如:丙午
  day: String
  # 例如:丁临
  month: String
  # 例如:丁未
  year: String
  # 节气
  jieqi: String
  # 文章
  solarTerms: String
}

input QueryPhysicalInput {
  id: ID
  # 记录类型 12 14
  type: Int
  # 手机号
  idcard: String
  # sn
  sn: String
  startDate: String
  endDate: String
}

extend type Query {
  persons(offset: Int, limit: Int): [Person]
  personsConnection(offset: Int, limit: Int, filter: String): PersonConnection
  person(id: ID!): Person
  documents(offset: Int, limit: Int): [Document]
  # 养生计划
  healthTasks(offset: Int, limit: Int): [HealthTask]
  # 查询关爱健康套餐
  carePlans(offset: Int, limit: Int): [CarePlan]
  # 生成批次下的套餐码
  cardBatchMake(batchNo: String!): [CareCardBatch]
  # 批次列表
  cardCardBatches(
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): CareCardBatchConnection
  # 批次号
  cardbatchs: [String]
  documentsConnection(personId: ID!, code: String, offset: Int, limit: Int, filter: String): DocumentConnection
  recordsConnection(personId: ID, type: Int, offset: Int, limit: Int, filter: String): RecordConnection
  records(personId: ID, offset: Int, limit: Int): [Record]
  # 查询记录
  record(recordId: Int): Record
  # 病例报告
  caseReports(personId: ID!): [Record]
  caseReportConnection(
    personId: ID!
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): RecordConnection
  # 诊疗记录
  diagnosisRecords(personId: ID!): [Record]
  diagnosisRecordConnection(
    personId: ID!
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): RecordConnection
  # 体检记录
  physicalRecords(personId: ID!): [Record]
  physicalRecordConnection(
    personId: ID!
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): RecordConnection
  # CRM体检记录查询
  crmPhysicalRecordConnection(page: Int, pageSize: Int, queryPhysicalInput: QueryPhysicalInput): RecordConnection
  # 记录
  recordConnection(page: Int, pageSize: Int, offset: Int, limit: Int, filters: [Filter], sort: Sort): RecordConnection
  # 体脂调养建议
  bodyfatAdvice(personId: ID!): Document
  # 体温调养建议
  temperatureAdvice(personId: ID!): Document
  # 血糖调养建议
  blSugarAdvice(personId: ID!): Document
  # 血氧调养建议
  oxygenAdvice(personId: ID!): Document
  # 身高体重调养建议
  bmiAdvice(personId: ID!): Document
  # 血压调养建议
  pressureAdvice(personId: ID!): Document
  # 未病检测调养建议
  diagnosisAdvice(personId: ID!): Article
  # 体质调养建议
  physicalAdvice(personId: ID!): [Article]
  # 糖尿病风险调养建议
  diabeteAdvice(personId: ID!): Article
  healthInformation(personId: ID): HealthInformation
  # 病症类型
  diagCategorys(part: String): [DiagnosisCategory]
  # 卦象
  divination(personId: ID!): Divination
  # 好运茶
  luckyTea(personId: ID!): LuckyTea
  # 当前时辰的天干地支
  nowTgdz(date: String): NowTgdz
  # 慢性病史列表
  chronics: [String]
}

# 辩证权重
input DiagScaleInput {
  id: Int
  # 1轻微 2一般 3严重
  value: Int
}

input DiagValueInput {
  id: Int
  value: Int
}

input SubmitHealthStoreInput {
  drink: String
  sleep: String
  smoke: String
  sport: String
  diet: String
  personId: ID
  storyTime: String
}

input TaskInput {
  id: ID
  status: Int
}

input StepInput {
  day: Int
  task: [TaskInput]
}

input SubmitHealthTaskInput {
  name: String
  days: Int
  steps: [StepInput]
}

input SubmitPersonSubTask {
  id: Int
  status: HealthSubTaskStatus
}

input SubmitPersonTaskRecordInput {
  doday: Int
  personId: ID
  taskId: ID
  tasks: [SubmitPersonSubTask]
}

input SubmitDiagScaleInput {
  cause: [String]!
  result: Int!
  weight: [String]!
  type: String!
}

input SubmitCarePlanInput {
  name: String
  # 价格
  price: String
  content: String
  # 服务次数
  timeInService: Int
}

input SubmitCareCardBatchInput {
  # 名称
  name: String
  # 数量
  quantity: String
}

input enabledCarePlanInput {
  person_id: ID
  secret: String
  idcard: String
}

input SubmitCaseReportRecordInput {
  personId: ID
  displayTime: String
  # 病例类型  体检报告,检验报告,检查报告
  type: Int
  # 病例
  examination: ExaminationInput
}

input ExaminationInput {
  # 医疗机构
  medicalInstitution: String
  # 照片
  images: [String]
  # 描述
  remarks: String
}

input SubmitChildInput {
  display_time: String
  # 儿童类型15
  type: Int
  # 档案ID
  person_id: ID
  # 儿童信息
  childinfo: ChildInput
  # 儿童评估
  childevaluation: ChildevaluationInput
}

# 儿童信息
input ChildInput {
  # 身高
  height: Float
  # 体重
  weight: Float
  # 头围长度
  head: Float
  # 胸围长度
  chest: Float
  # 牙齿颗数
  teeth: Int
  # 儿童年龄
  pediatricage: String
}

# 儿童评估
input ChildevaluationInput {
  # 评估结果
  result: String
}

# 健康日记
input SubmitHealthDiaryInput {
  # 时间
  storyTime: String
  # 睡眠
  sleep: String
  # 口味
  taste: String
  # 吸烟
  smoke: String
  # 早餐
  eat: String
  # 素食
  diet: String
  # 运动
  sport: String
  # 喝酒
  drink: String
}

# this schema allows the following mutation:
extend type Mutation {
  # @deprecated 添加健康储蓄
  submitHealthStoreItem(entity: SubmitHealthStoreInput!): HealthStoreItem
  # 添加养生计划
  submitHealthTask(entity: SubmitHealthTaskInput!): HealthTask
  # 用户开始养生计划
  submitPersonTask(personId: ID!, healthtaskId: ID!): PersonHealthTask
  # 用户添加养生计划的记录
  submitPersonTaskRecord(entity: SubmitPersonTaskRecordInput!): HealthtaskRecord
  # 添加健康关爱计划
  submitCarePlan(entity: SubmitCarePlanInput!): CarePlan
  # 添加健康关爱卡片批次
  submitCareCardBatch(carePlanId: ID!, entity: SubmitCareCardBatchInput!): BooleanResponse
  # 激活 健康关爱套餐
  activeCarePlan(entity: enabledCarePlanInput!): CareCardBatch
  # 解锁 健康关爱套餐
  unlockCarePlan(person_id: ID!): JSON
  # 是否参加了家庭关爱套餐
  isjoinCarePlan(person_id: ID!): JSON
  # 添加儿童记录
  submitChild(entity: SubmitChildInput): Record
  # 添加病例报告
  submitCaseReportRecord(entity: SubmitCaseReportRecordInput): Record
  submitDiagScale(entity: SubmitDiagScaleInput!): Scale
  # 未病分析
  submitDiag(entity: [DiagScaleInput]!, pid: ID!): DiagnosisAnalysis
  removeDiagCategory(type: String!, code: String!): String!
  removeDiag(type: String!, code: String!): String!
  removeRecord(id: ID!): String
  # 添加健康日记
  submitHealthDiary(personId: ID!, entity: SubmitHealthDiaryInput!): HealthDiary
}

extend type Subscription {
}
# 穿戴设备
type Device {
  # 主键
  id: ID
  # 用户ID
  memberId: ID
  member: Member
  # 家庭联系人ID
  personId: ID
  person: Person
  # 设备唯一性标识,这里指设备的出厂唯一性标识，并非数据库里的ID
  deviceId: String
  # 是否为用户 0否,1是
  user: Int
  # 设备类型
  deviceType: String
  # 穿戴设备详参
  deviceDetail: DeviceDetail
}

# 穿戴设备详参
type DeviceDetail {
  # 人员信息
  person: DevicePerson
  # 设备基础信息
  deviceProfile: DeviceProfile
}

# 人员信息
type DevicePerson {
  # 用户名
  username: String
  # 密码
  password: String
  # 注册邮箱
  email: String
  # 别名
  nickname: String
  # 手机
  phone: String
  # 电话号码
  telephone: String
  # 服务名
  app: String
  # 体重(KG)
  weight: Int
  # 步数(CM)
  step: Int
  # 年龄(岁)
  age: Int
  # 身高(CM)
  height: Int
  # 头像地址
  avatarUrl: String
  # 头像文件
  avatar: String
  # 角色
  role: String
  # 性别
  gender: String
  # 创建时间
  createTime: String
  # 更新时间
  updateTime: String
  # 启用
  enable: Boolean
  # 邮箱已验证
  emailIsChecked: Boolean
  # 手机已验证
  phoneIsChecked: Boolean
  # 允许SOS推送
  pushSosEnable: Boolean
  # 允许电子围栏推送
  pushFenceEnable: Boolean
  # 允许健康数据推送
  pushAbnormalEnable: Boolean
  # 允许家庭圈消息推送
  pushMessageEnable: Boolean
  # 允许低电推送
  pushLowpowerEnable: Boolean
  # 允许系统消息推送
  pushSystemEnable: Boolean
  # 设备列表
  devices: [String]
  # 小组列表
  groups: [JSON]
}

# 亲情号码信息
type DeviceFamilyNumber {
  # 亲情序号
  seqid: Int
  # 名字
  name: String
  # 电话号码
  num: String
  # 应急号码
  dialFlag: Boolean
}

# 设备基础信息
type DeviceProfile {
  # 是否在线
  online: Boolean
  # 亲情号码信息
  sosNumbers: [DeviceFamilyNumber]
  # 安全围栏
  deviceSafe: DeviceSafe
  # SIM卡号
  simPhone: String
  # SIM卡类型
  simPhoneType: String
  # IMEI识别码
  imei: String
  # 设备型号
  type: String
  # 设备固定版本
  softwareVersion: String
  # 剩余电量
  remainingPower: Int
  # 目标步数
  stepObjective: Int
}

type DeviceSafe {
  # 0，触发一天；1，每日触发
  freq: Boolean
  # 是否启用
  enable: Boolean
  # 围栏名称
  name: String
  # 目标时间与当日0点之间相差的秒数。如8 a.m 8*60*60=28800
  timeBegin: Int
  timeEnd: Int
  safeArea: [DeviceCoordinate]
}

# 坐标
type DeviceCoordinate {
  # 维度
  lat: Float
  # 经度
  lon: Float
}

# 数据类型
enum DeviceDataType {
  # 消息通知
  SMS
  # 跌倒数据
  DOWN
  # 开关机数据
  OPEN
  # 睡眠
  SLEEP
  # 记步
  STEP
  # 心率
  HEARTRATE
  # SOS
  SOS
  # 位置
  LOCATION
  # 身高
  HEIGHT
  # 体重
  WEIGHT
  # 血糖
  BLOOD_SUGAR
  # 血压
  BLOOD_PRESSURE
}

#  位置数据发送
type DeviceLocationData {
  id: ID
  # 15位设备唯一序号
  imei: String
  # 发生时间YYYY-MM-DD HH:mm:SS.xxxxxx
  timeBegin: String
  # 是否为响应
  isReply: Boolean
  # 是否追踪
  isTrack: Boolean
  # 城市
  city: String
  # 地址
  address: String
  # 经度
  lon: Float
  # 维度
  lat: Float
  # 0:Gps定位; 1:基站定位
  type: String
  createTime: String
  isRead: Int
  # 格式化时间差
  formatDiff: String
  # 来源
  from: String
}

# SOS数据发送
type DeviceSosData {
  id: ID
  # 15位设备唯一序号
  imei: String
  # 发生时间YYYY-MM-DD HH:mm:SS.xxxxxx
  timeBegin: String
  # 心率
  heartrate: Int
  # 城市
  city: String
  # 地址
  address: String
  # 经度
  lon: Float
  # 维度
  lat: Float
  # 0:Gps定位; 1:基站定位
  type: String
  createTime: String
  isRead: Int
  # 格式化时间差
  formatDiff: String
  # 来源
  from: String
}

# 心率数据发送
type DeviceHeartrateData {
  id: ID
  # 15位设备唯一序号
  imei: String
  # 发生时间YYYY-MM-DD HH:mm:SS.xxxxxx
  timeBegin: String
  # 心率
  heartrate: Int
  createTime: String
  isRead: Int
  # 格式化时间差
  formatDiff: String
  # 来源
  from: String
}

# 计步数据发送
type DeviceStepData {
  id: ID
  # 15位设备唯一序号
  imei: String
  # 发生时间YYYY-MM-DD HH:mm:SS.xxxxxx
  timeBegin: String
  # 步数
  value: String
  createTime: String
  isRead: Int
  # 格式化时间差
  formatDiff: String
  # 来源
  from: String
}

# 睡眠数据发送
type DeviceSleepData {
  id: ID
  # 15位设备唯一序号
  imei: String
  # 发生时间YYYY-MM-DD HH:mm:SS.xxxxxx
  timeBegin: String
  # 结束时间YYYY-MM-DD HH:mm:SS.xxxxxx
  timeEnd: String
  # 固定30分钟
  interval: Int
  # 检测次数
  total: Int
  # 样例截取   睡眠数据
  data: String
  # 浅睡眠(小时)
  asleep: Float
  # 中睡眠(小时)
  bsleep: Float
  # 深睡眠(小时)
  csleep: Float
  # 总睡眠
  countSleep: Float
  createTime: String
  isRead: Int
  # 格式化时间差
  formatDiff: String
  # 来源
  from: String
}

# 开关机数据发送
type DeviceOpenData {
  id: ID
  # 15位设备唯一序号
  imei: String
  # 发生时间YYYY-MM-DD HH:mm:SS.xxxxxx
  timeBegin: String
  # 开/关机类型  0开机 2普通  3低电
  type: String
  # 剩余电量(%)
  remainingPower: Int
  createTime: String
  isRead: Int
  # 格式化时间差
  formatDiff: String
  # 来源
  from: String
}

# 跌倒数据发送
type DeviceDownData {
  id: ID
  # 15位设备唯一序号
  imei: String
  # 发生时间YYYY-MM-DD HH:mm:SS.xxxxxx
  timeBegin: String
  # 城市
  city: String
  # 地址
  address: String
  # 经度
  lon: Float
  # 纬度
  lat: Float
  # 0:Gps定位; 1:基站定位
  type: String
  createTime: String
  isRead: Int
  # 格式化时间差
  formatDiff: String
  # 来源
  from: String
}

# 消息通知
type DeviceSmsData {
  id: ID
  # 15位设备唯一序号
  imei: String
  # type=1 SOS，type=2 fall，type=3 new 新成员加入 ，type=4 电子围栏触发， type=5 设备低电
  type: Int
  # 机构ID
  communityid: String
  createTime: String
  isRead: Int
  # 格式化时间差
  formatDiff: String
  # 来源
  from: String
}

# 身高
type DeviceHeightData {
  id: ID
  # 15位设备唯一序号
  imei: String
  # 身高(cm)
  height: Float
  # 体重(斤)
  weight: Float
  bmi: Float
  # 记录时间
  timeBegin: String
  createTime: String
  # 格式化时间差
  formatDiff: String
  # 来源
  from: String
}

# 体重
type DeviceWeightData {
  id: ID
  # 15位设备唯一序号
  imei: String
  # 体重(斤)
  weight: Int
  # 记录时间
  timeBegin: String
  createTime: String
  # 格式化时间差
  formatDiff: String
  # 来源
  from: String
}

# 血糖
type DeviceBloodSugarData {
  id: ID
  # 15位设备唯一序号
  imei: String
  # 血糖
  sugarValue: Float
  # 记录时间
  timeBegin: String
  createTime: String
  # 格式化时间差
  formatDiff: String
  # 来源
  from: String
}

# 血压
type DeviceBloodPressureData {
  id: ID
  # 15位设备唯一序号
  imei: String
  # 收缩压
  SBP: String
  # 舒张压
  DBP: String
  # 记录时间
  timeBegin: String
  createTime: String
  # 格式化时间差
  formatDiff: String
  # 来源
  from: String
}

# 推送数据
type DevicePushData implements Entity {
  id: ID
  # 15位设备唯一序号
  imei: String
  # 发生时间YYYY-MM-DD HH:mm:SS.xxxxxx
  timeBegin: String
  # 结束时间YYYY-MM-DD HH:mm:SS.xxxxxx
  timeEnd: String
  # 数据类型
  dataType: DeviceDataType
  # 是否为响应
  isReply: Boolean
  # 是否追踪
  isTrack: Boolean
  # 城市
  city: String
  # 地址
  address: String
  # 经度
  lon: Float
  # 维度
  lat: Float
  # 0:Gps定位; 1:基站定位   dataType=SMS type=1 SOS，type=2 fall，type=3 new 新成员加入 ，type=4 电子围栏触发， type=5 设备低电
  type: Int
  # 心率
  heartrate: Int
  # 步数
  value: String
  # 固定30分钟
  interval: Int
  # 检测次数
  total: Int
  # 样例截取   睡眠数据
  data: String
  # 浅睡眠(小时)
  asleep: Float
  # 中睡眠(小时)
  bsleep: Float
  # 深睡眠(小时)
  csleep: Float
  # 总睡眠
  countSleep: Float
  # 剩余电量(%)
  remainingPower: Int
  # 机构ID
  communityid: String
  createTime: String
  isRead: Int
  # 收缩压
  SBP: String
  # 舒张压
  DBP: String
  # 身高(cm)
  height: Float
  # 体重(斤)
  weight: Float
  # bmi
  bmi: Float
  # 血糖
  sugarValue: Float
  # 格式化时间差
  formatDiff: String
  # 来源
  from: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type DevicePushDataConnection implements Pagination, Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [DevicePushData]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [DevicePushDataWrapper]
}

type DevicePushDataWrapper implements EdgeType {
  cursor: String
  node: DevicePushData
}

# 设备个人数据
type DevicePersonData {
  # 设备通知数量
  notifyNumber: Int
  # 最新位置数据
  locationData: DeviceLocationData
  # 最新心率数据
  heartrateData: DeviceHeartrateData
  # 最新睡眠数据
  sleepData: DeviceSleepData
  # 最新步数数据
  stepData: DeviceStepData
  # 最新bmi数据
  heightData: DeviceHeightData
  # 最新血糖数据
  bloodSugarData: DeviceBloodSugarData
  # 最新血压数据
  bloodPressureData: DeviceBloodPressureData
  # 步数列表
  stepDataList: [DeviceStepData]
  # bmi列表
  heightDataList: [DeviceHeightData]
  # 心率列表
  heartrateDataList: [DeviceHeartrateData]
  # 睡眠列表
  sleepDataList: [DeviceSleepData]
  # 血糖列表
  bloodSugarDataList: [DeviceBloodSugarData]
  # 血压列表
  bloodPressureDataList: [DeviceBloodPressureData]
}

# 聚合单位
enum Aggregation {
  # 天
  day
  # 小时
  hour
  # 次
  times
}

extend type Query {
  # 查询用户的所有设备
  devices(memberId: ID!): [Device]
  # 查询设备信息
  device(deviceId: ID!): DeviceDetail
  # 得到最新推送数据信息，包括心率，步数，睡眠
  devicePushData(entity: deviceDataInput!): DevicePushDataConnection
  # 设备个人数据
  devicePersonData(
    member_id: ID
    person_id: ID
    data_type: [DeviceDataType]
    smstype: [Int]
    sugartype: Int
    begin_time: String
    end_time: String
    times: Int
    aggregation: Aggregation
    heart_rate_min_threshold: Int
    heart_rate_max_threshold: Int
    show_edit_data: Boolean
  ): DevicePersonData
  # 数据趋势
  # deviceData(member_id:ID,person_id:ID,,data_type:DeviceDataType!,sugartype: [Int])
}

input deviceDataInput {
  member_id: ID
  person_id: ID
  device_id: ID
  # yyyy-mm-dd
  date_time: String
  data_type: [DeviceDataType]!
  # SMS 子类型 type=1 SOS，type=2 fall，type=3 new 新成员加入 ，type=4 电子围栏触发， type=5 设备低电
  smstype: [Int]
  # 血糖 子类型
  sugartype: [Int]
  # 心率最低警戒值
  heart_rate_min_threshold: Int
  # 心率最高警戒值
  heart_rate_max_threshold: Int
  # 是否显示自定义数据 默认展示
  show_edit_data: Boolean
  pageNow: Int
  pageSize: Int
}

input upFamilyNumInput {
  # 设备ID
  device_id: ID
  # 号码昵称
  name: String
  # 亲情号码
  num: String
  # 0不设置为紧急呼叫号码,1设置为紧急呼叫号码
  dial_flag: Int
  # 第几个亲情号[1-10]
  who: Int
}

input upSafeInput {
  # 设备ID
  device_id: ID
  # 禁用0,启用1
  enable: Int
  # 围栏名称
  name: String
  # 0，触发一天；1，每日触发
  freq: Int
  # 目标时间与当日0点之间相差的秒数。如8 a.m 8*60*60=28800
  time_begin: Int
  time_end: Int
  #  x1,y1;x2,y2;xn,yn  一组由';'分隔的坐标，坐标用','分隔。且需要呈闭环，如A,B,C,D 4个点，则应该上传的数据为 A;B;C;D;A
  safe_area: String
}

input upLocationsInput {
  # 设备ID
  device_id: ID
  #  表示一个时间范围。YYYYMMDD[HH][-NN] YYYYMMDD为年月日，[]内为可选参数，HH为时，YYYYMMDD[HH]一起描述了开始时间，-NN表示前面时刻之后的多少小时的数据，描述了结束时间
  time_begin: String
  # 层级深度
  depth: Int
  # 每页多少条
  rows_per_page: Int
}

input bindDeviceInput {
  member_id: ID!
  person_id: ID!
  device_id: ID!
  # 1 本人  0 非本人
  user: Int!
  sim_phone: String
  sim_phone_type: SimPhoneType
}

input upSimPhoneInput {
  deviceId: ID!
  simPhone: String!
}

enum SimPhoneType {
  unicom
  cmcc
  ctcc
}

# this schema allows the following mutation:
extend type Mutation {
  # 绑定设备
  bindDevice(entity: bindDeviceInput!): BooleanResponse
  # 解绑设备
  unbindDevice(device_id: ID!): JSON
  # 设置亲情号码
  upFamilyNum(entity: upFamilyNumInput!): BooleanResponse
  # 设置sim手机号
  upSimPhone(entity: upSimPhoneInput!): BooleanResponse
  # 设置目标步数
  upTargetStep(deviceId: ID!, stepObjective: Int!): BooleanResponse
  submitFamilyNum(entity: upFamilyNumInput!): BooleanResponse
  removeFamilyNum(entity: upFamilyNumInput!): BooleanResponse
  # 设置安全围栏
  upSafe(entity: upSafeInput!): BooleanResponse
  submitSafe(entity: upSafeInput!): BooleanResponse
  removeSafe(entity: upSafeInput!): BooleanResponse
  # 设置最新位置信息
  upLocation(deviceId: ID!): JSON
  # 设备轨迹位置信息
  upLocations(entity: upLocationsInput): JSON
  # 设置消息已读
  upPushDataRead(dataId: ID!): BooleanResponse
  # 新增身高体重
  submitHeightWeightPushData(
    memberId: ID!
    personId: ID!
    height: Float
    weight: Float
    timeBegin: String
  ): BooleanResponse
  # 新增血糖
  submitSugarPushData(memberId: ID!, personId: ID!, sugarValue: Float, type: Int, timeBegin: String): BooleanResponse
  # 新增血压  SBP:收缩压  DBP:舒张压
  submitPressurePushData(memberId: ID!, personId: ID!, SBP: String, DBP: String, timeBegin: String): BooleanResponse
  # 新增心率
  submitHeartratePushData(memberId: ID!, personId: ID!, heartrate: Int, timeBegin: String): BooleanResponse
  # 测试心率
  submitHeartrateTest(deviceId: ID!): BooleanResponse
}
# 圈子
type Circle implements Entity {
  # 圈子ID
  id: ID
  # 名称
  name: String
  # 描述
  description: String
  # 排序
  sort: Int
  # 封面图
  cover: Image
  # 圈子下的帖子
  posts: [Article]
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 文章分页
type ArticleConnection implements Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Article]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [ArticleWrapper]
}

type ArticleWrapper implements EdgeType {
  cursor: String
  node: Article
}

# 文章分类
type ArticleCategory implements Entity {
  # 分类ID
  id: ID
  # 名称
  name: String
  # 层级
  layer: Int
  # 路径
  path: String
  # 描述
  description: String
  # 排序
  sort: Int
  # 分类编码
  code: String
  # 父级分类
  parent: ArticleCategory
  # 该分类下的文章
  articles(limit: Int, status: String): [Article]
  # 封面图
  cover: Image
  # 该分类下的文章分页对象
  articlesConnection(
    page: Int
    offset: Int
    limit: Int
    filter: String
    filters: [Filter]
    pageSize: Int
    sort: Sort
  ): ArticleConnection @deprecated
  # 文章分类
  type: ArticleCategoryType
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type ArticleMetaData {
  title: String
  description: String
}

enum ArticleCategoryType {
  # 文章
  article
  # 圈子
  circle
}

# 文章状态
enum ArticleStatus {
  draft
  published
}

# 文章标签
type ArticleTag {
  # 编码
  id: String
  # 名称
  name: String
}

# 文章
type Article implements Entity {
  # 文章ID
  id: ID!
  # 编码
  sn: String
  # 标题
  title: String
  # 摘要
  summary: String
  # 封面图
  cover: Image
  # 作者
  author: String
  # 发布时间
  publishDate(format: String): Date
  # 分类
  category: ArticleCategory
  # 文章内容
  content: String
  # 发布状态
  status: ArticleStatus
  # 关键词
  keywords: String
  #标签
  tags: [String]
  # SEO 优化字段
  metaData: ArticleMetaData
  # 阅读数,read=true时接口端进行阅读数+1操作
  readNum(read: Boolean): Int
  # 评论数
  commentNum: Int
  # 点赞数
  praiseNum: Int
  # 发帖用户
  user: Personal
  # 最后评论时间
  lastCommentTime(format: String): Date
  # 用户是否已赞, uid为空时默认返回false
  ispraise(uid: ID): Boolean
  # 用户是否已收藏
  iscollect(uid: ID): Boolean
  # 推送
  push: Push
  # 文章评论
  comments(offset: Int, limit: Int): [Comment]
  # 评论列表
  commentConnection(
    page: Int
    offset: Int
    limit: Int
    filters: [Filter]
    pageSize: Int
    sort: Sort
  ): CommentConnection @deprecated
  uuid: String
  creator: String
  modifier: String
  createTime(format: String): Date
  modifyTime(format: String): Date
}

input ArticleMetaDataInput {
  title: String
  description: String
}

# 新增文章分类
input submitCategoryInput {
  #id/编码（必填）
  id: String!
  #名称（必填）
  name: String!
  # 类型
  type: ArticleCategoryType
  #层级
  layer: Int
  #描述
  description: String
  #排序编号
  sort: Int
  #父类id
  parentId: String
  # 封面图
  cover: String
}

# 新增文章
input submitArticleInput {
  #编码
  sn: String
  #标题
  title: String!
  #摘要
  summary: String
  #发布日期
  publishDate: String
  #作者
  author: String
  # 发帖人ID
  uid: String
  # 内容
  content: String
  # 封面图
  cover: String
  #文章所属分类
  categoryId: String
  # 关键词
  keywords: String
  # SEO
  metaData: ArticleMetaDataInput
  #标签
  tags: [String]
}

# 修改文章
input updateArticleInput {
  #标题
  title: String
  #摘要
  summary: String
  #编码
  sn: String
  # 状态
  status: ArticleStatus
  #发布日期
  publishDate: String
  #作者
  author: String
  # 内容
  content: String
  # 封面图
  cover: String
  #文章所属分类
  categoryId: String
  # SEO
  metaData: ArticleMetaDataInput
  #标签
  tags: [String]
}

extend type Mutation {
  # 新增文章分类
  submitCategory(entity: submitCategoryInput!): ArticleCategory
  # 修改文章分类（put方式）
  updateCategory(entity: submitCategoryInput!): ArticleCategory
  # 修改文章分类（patch方式）
  patchCategory(entity: submitCategoryInput!): ArticleCategory
  # 删除分类
  removeCategory(id: String!): String
  # 新增文章
  submitArticle(entity: submitArticleInput!, push: SubmitArticlePushInput): Article
  # 修改文章（put方式）
  updateArticle(id: ID!, entity: updateArticleInput!): Article
  # 修改文章（patch方式）
  patchArticle(id: ID!, entity: updateArticleInput!): Article
  # 删除文章
  removeArticle(id: Int!): Int
  # 发布
  publishArticle(id: Int!, date: String): Article
  # 取消发布
  unpublishArticle(id: Int!): Article
  # 评论+1
  articleCommentNum(id: ID!): Void
  # 点赞+1/-1
  articlePraiseNum(id: ID!, uid: ID!, iscancel: Boolean): Void
  # 阅读+1
  articleReadNum(id: ID!): Void
  # 关注圈子
  watchCircle(uid: ID, circleId: ID): Void
  # 取消关注圈子
  unwatchCircle(uid: ID, circleId: ID): Void
}

extend type Query {
  # 文章分类，id
  articleCategory(id: String): ArticleCategory
  # 文章详情
  article(id: ID!, type: String): Article
  articles(category: String, sn: String, status: String, q: String, offset: Int, limit: Int): [Article]
  # 查询文章标签
  articleTags(limit: Int): [ArticleTag]
  articlesConnection(
    categoryId: ID
    page: Int
    offset: Int
    limit: Int
    filter: String
    filters: [Filter]
    pageSize: Int
    sort: Sort
    q: String
  ): ArticleConnection
  userArticleRecommend(id: Int!): Article
  userArticleCategoryRecommend(code: String!, page: Int, limit: Int): [Article]
  articleCategorys(id: String): [ArticleCategory]
  # 圈子详情
  circle(id: ID!): Circle
  # 圈子
  circles(limit: Int): [Circle]
  # 全部帖子
  posts(circleId: ID, offset: Int, limit: Int): [Article]
  # 帖子详情
  post(id: ID!): Article
}
# 广播位
type Banner implements Entity {
  # 广播类型
  id: ID
  # 广播名称
  name: String
  # 广播图尺寸
  size: String
  # 描述
  description: String
  # 图片项
  items: [BannerItem]
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 广播项
type BannerItem {
  id: ID
  # 标题
  title: String
  # 概述
  summary: String
  # 跳转依据
  url: String
  # 排序
  sort: Int
  # 广播图片
  picture: Image
  bannerImage: Image @deprecated
}

type BannerConnection implements Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Banner]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [BannerWrapper]
}

type BannerWrapper implements EdgeType {
  cursor: String
  node: Banner
}

input SubmitBannerInput {
  # 广播类型
  id: String
  # 广播名称
  name: String
  # 广播图尺寸
  size: String
  # 描述
  description: String
  # 广播项
  items: [BannerItemInput]
}

input BannerItemInput {
  id: ID
  # 标题
  title: String
  # 概述
  summary: String
  # 跳转依据
  url: String
  # 排序
  sort: Int
  # 广播图片
  picture: String
}

extend type Mutation {
  submitBanner(id: ID!, name: String, description: String, items: [BannerItemInput]): Banner
  updateBanner(id: ID!, name: String, description: String, items: [BannerItemInput]): Banner
  removeBanner(id: ID!): Void
}

extend type Query {
  # banner 详情
  banner(id: ID!): Banner
  # Banners
  banners(limit: Int): [Banner]
  # 广播位分页
  bannerConnection(page: Int, pageSize: Int, offset: Int, limit: Int, filters: [Filter], sort: Sort): BannerConnection
}
# 评论
type Comment implements Entity {
  id: ID
  # 评论内容
  content: String
  # 评论类型
  targetType: CommentType
  # 评论对象ID
  targetId: ID
  # 关联评论
  replyComments: [Comment]
  # 关联会员
  personal: Personal
  # 冗余文章标题
  title: String
  # 来源的评论
  forComment: Comment
  ip: String
  # 是否展示
  show: Boolean
  username: String
  # 格式话时间
  ftime: String
  # 积分(评论时才会有数据)
  point: String
  # 健康点(评论时才会有数据)
  health: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

enum CommentType {
  # 医生评论
  doctor
  # 文章评论
  article
  # 会员评论的评论
  member
}

# 评论分页对象
type CommentConnection implements Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Comment]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [CommentWrapper]
}

type CommentWrapper implements EdgeType {
  cursor: String
  node: Comment
}

input SubmitCommentInput {
  # 评论内容
  content: String!
  # 文章ID
  targetId: ID!
  # 评论对象
  #targetType: CommentType!
  # 会员id
  personalId: ID!
  # 文章标题
  title: String!
  # 评论的ID
  forCommentId: ID
}

# this schema allows the following mutation:
extend type Mutation {
  # 对文章评论
  submitArticleComment(entity: SubmitCommentInput!): Comment
  # 对文章的评论进行评论 评论内容 content 评论的ID forCommentId, uid:会员id
  submitArticleComComment(forCommentId: ID!, content: String!, uid: ID!): Comment
}

extend type Query {
  # 我的评论分页查询
  myCommentConnection(
    mid: ID!
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): CommentConnection
  # 提到我的评论
  aboutMyCommentConnection(
    mid: ID!
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): CommentConnection
  # 某个文章下的评论 aid:文章ID
  articleCommentConnection(
    aid: ID!
    page: Int
    offset: Int
    limit: Int
    filters: [Filter]
    pageSize: Int
    sort: Sort
  ): CommentConnection
}
#
type FormPage {
  id: String
  name: String
  title: String
  type: String
  layout: FormPageLayout
} 

# 自定义表单的布局
type FormPageLayout {
  title: String
  limit: Int
  items: [FormPageLayoutItem]
}

type FormPageInput {
  name: String
  type: String
}

type FormPageGroup {
  label: String
  input: FormPageInput
}

type FormPageLayoutItem {
  type: String
  name: String
  title: String
  label: String
  input: FormPageInput
  groups: [FormPageGroup]
}

type FormObjectConnection implements Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [FormObject]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [FormObjectWrapper]
}

type FormObjectWrapper implements EdgeType {
  cursor: String
  node: FormObject
}

type FormObject implements Entity {
  id: Int!
  fid: String
  number: String
  site: Address
  contact: String
  theme: String
  tel: String
  category: String
  doctor: Doctor
  date: String
  number: String
  contact: String
  tel: String
  interval: String
  appeal: String
  remarks: String
  status: String
  uuid: String
  team: Team
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type DMFormConnection implements Pagination, Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [DMForm]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [DMFormWrapper]
}

type DMFormWrapper implements EdgeType {
  cursor: String
  node: DMForm
}

type DMForm implements Entity {
  id: String!
  name: String
  fields: [Field]
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
  pages: [FormPage]
  page(id: String!): FormPage
  objects: [FormObject]
  object(id: String!): FormObject
}

type Field implements Entity {
  id: String!
  name: String
  type_id: String
  required: Boolean
  enums: [String]
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

extend type Query {
  dmform(id: String!): DMForm
  dmforms(offset: Int, limit: Int, filter: String): [DMForm]
  dmformsConnection(offset: Int, limit: Int, filter: String): [DMFormConnection]
  dmformObject(id: Int!): FormObject
  dmformObjectsConnection(
    fid: String!
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filter: String
  ): FormObjectConnection
}
# 段落
type Section {
  id: Int
  title: String
  sort: Int
  priority: String
  template_id: Int
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 问题
type Question implements Entity {
  id: Int
  type: String
  title: String
  options: [Option]
  sort: Int
  template_id: Int
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 选项
type Option {
  id: String
  title: String
}

# 人员类型
type WhoType implements Entity {
  creator: String
  modifier: String
  id: Int
  title: String
  type: String
  uuid: String
  createTime: Date
  modifyTime: Date
}

type FormTemplatesConnection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [FormTemplate]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [FormTemplateWrapper]
}

type FormTemplateWrapper implements EdgeType {
  cursor: String
  node: FormTemplate
}

type FormTemplateItem {
  id: ID!
  rid: Int!
  type: String
  title: String
  summary: String
  priority: String
  item_type: String
  priority: String
  options: [Option]
  sort: Int
  item_type: String
}

type FormTemplate implements Entity {
  id: ID!
  name: String
  summary: String
  items: [FormTemplateItem]
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type FormType implements Entity {
  id: Int!
  name: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 模板
type PaperConnection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Paper]
}

type Paper implements Entity {
  creator: String
  modifier: String
  id: Int
  interviewee: String
  type_id: Int
  type_name: String
  name: String
  title: String
  interviewer: String
  template_id: Int
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

input OptionInput {
  id: String
  title: String
}

input SubmitFormTypeInput {
  name: String!
  description: String
}

input UpdateFormTypeInput {
  id: Int!
  name: String!
  description: String
}

input SubmitQuestionInput {
  type: String!
  title: String!
  options: [OptionInput]
  sort: Int
  tid: Int!
}

input UpdateQuestionInput {
  id: Int!
  title: String
  type: String
  options: [OptionInput]
}

input SubmitWhoTypeInput {
  title: String!
  type: String!
  uuid: String
}

input UpdateWhoTypeInput {
  id: Int!
  title: String
  type: String
}

input SubmitSectionInput {
  title: String!
  priority: String
  sort: Int
  tid: Int!
}

input UpdateSectionInput {
  id: Int!
  sort: Int
  title: String
  summary: String
  priority: String
}

input SubmitFormTemplateInput {
  name: String!
  summary: String
}

input UpdateFormTemplateInput {
  id: Int!
  name: String
  summary: String
}

# this schema allows the following mutation:
extend type Mutation {
  upstatusObject(id: Int!, status: String!): FormObject
  submitFormType(entity: SubmitFormTypeInput!): FormType
  updateFormType(entity: UpdateFormTypeInput!): FormType
  removeFormType(id: Int!): Int!
  submitSection(entity: SubmitSectionInput!): FormTemplateItem
  updateSection(entity: UpdateSectionInput!): FormTemplateItem
  removeSection(id: Int!): Int!
  submitFormTeamplate(entity: SubmitFormTemplateInput!): FormTemplate
  updateFormTeamplate(entity: UpdateFormTemplateInput!): FormTemplate
  removeFormTeamplate(id: Int!): Int!
  submitQuestion(entity: SubmitQuestionInput!): FormTemplateItem
  updateQuestion(entity: UpdateQuestionInput!): FormTemplateItem
  removeQuestion(id: Int!): Int!
  submitWhoType(entity: SubmitWhoTypeInput!): WhoType
  updateWhoType(entity: UpdateWhoTypeInput!): WhoType
  removeWhoType(id: Int!): Int!
}

extend type Query {
  formTypes(offset: Int, limit: Int, filter: String): [FormType]
  formTemplates(offset: Int, limit: Int, filter: String): [FormTemplate]
  formTemplatesConnection(offset: Int, limit: Int, filter: String): FormTemplatesConnection
  formTemplate(id: ID!): FormTemplate
  paperConnection(offset: Int, limit: Int, filter: String): PaperConnection
}
# 推送
type Push implements Entity {
  # ID
  id: ID
  # 性别
  sex: Sex
  # 消息类型
  msgType: Int
  # 文章id
  msgId: ID
  # 消息内容
  msgTitle: String
  # 1、最小年龄（包含该 值） 2、默认值为 0；若为 0，则不判断年龄
  minAge: Int
  # 1、最大年龄（包含该 值） 2、默认值为 0；若为 0，则不判断年
  maxAge: Int
  # 中医体质0 -普适（所有体质） 普适（所有体质） 普适（所有体质）,1 -平和质,2 -气虚质,3 -阳虚质,4 -阴虚质,5 -痰湿质,6 -湿热质,7 -血瘀质,8 -气郁质,9 -特秉质
  acquiredTypes: [String]
  # 慢性病  1 -健康,2 -糖尿病,3 -高血脂,4 -高血压,5 -脑卒中,6 -冠心病
  chronicTypes: [String]
  # 发送日期
  pushDate: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 新增推送
input SubmitArticlePushInput {
  # 性别
  sex: Sex!
  # 消息类型 【0：24节气】
  msgType: Int!
  # 文章id
  msgId: ID!
  # 消息内容
  msgTitle: String!
  # 1、最小年龄（包含该 值） 2、默认值为 0；若为 0，则不判断年龄
  minAge: Int!
  # 1、最大年龄（包含该 值） 2、默认值为 0；若为 0，则不判断年
  maxAge: Int!
  # 中医体质 【 A -平和质 B -气虚质 C -阳虚质 D -阴虚质 E -痰湿质 F -湿热质 G -血瘀质 H -气郁质 I -特秉质】传值：A,B,C
  acquiredTypes: [String]!
  # 慢性病 【健康,糖尿病,高血脂,高血压,脑卒中,冠心病】
  chronicTypes: [String]!
  # 发送日期
  pushDate: String!
}

extend type Mutation {
  # 新增推送
  submitArticlePush(entity: SubmitArticlePushInput!): Push
  # 修改推送
  updateArticlePush(id: ID!, entity: SubmitArticlePushInput!): Push
  # 删除推送
  removeArticlePush(id: ID!): Void
}

extend type Query {
  articlePush(id: ID!): Push
}

extend type Subscription {
}
#  库存
type Depot implements Entity {
  id: ID
  # 商品编码
  sn: String
  # 商品名称
  productName: String
  # 良品数量
  goodCommodityQuantity: Int
  # 不良品数量
  badCommodityQuantity: Int
  # 批次号
  batchNumber: String
  # 生产时间
  productTime: Date
  # 良品数量
  totalGoodCommodityQuantity: String
  # 不良品数量
  totalBadCommodityQuantity: String
  #　操作人
  user: User
  # 商品
  product: Product
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type DepotConnection implements Pagination, Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Depot]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [DepotWrapper]
}

type DepotWrapper implements EdgeType {
  cursor: String
  node: Depot
}

# 库存交易记录表
type DepotTradeRecord implements Entity {
  id: ID
  # 商品编码
  sn: String
  # 商品名称
  productName: String
  # 单据出入库类型
  depotBillType: DepotBillType
  # 单据出入库号
  depotInOrOutNo: String
  # 交易类型
  tradeType: TradeType
  # 良品数量
  goodCommodityQuantity: Int
  # 不良品数量
  badCommodityQuantity: Int
  # 批次号
  batchNumber: String
  # 生产时间
  productTime: Date
  # 入库时间
  inOrOutDepotTime: Date
  # 商品
  product: Product
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type DepotTradeRecordConnection implements Pagination, Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [DepotTradeRecord]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [DepotTradeRecordWrapper]
}

type DepotTradeRecordWrapper implements EdgeType {
  cursor: String
  node: DepotTradeRecord
}

# 入库
type DepotIn implements Entity {
  id: ID
  # 入库单号
  depotInNo: String
  # 单据入库类型
  depotBillType: DepotInType
  # 入库单状态
  depotInStatus: DepotInStatus
  # 供应商名字
  supplierName: String
  # 到货时间
  arriveTime: Date
  # 收货时间
  receiveTime: Date
  # 入库时间
  inDepotTime: Date
  # 预计到货数量
  predictArriveQuantity: Int
  # 实际到货数量
  realityArriveQuantity: Int
  # 良品数量
  goodCommodityQuantity: Int
  # 不良品数量
  badCommodityQuantity: Int
  # 入库商品
  depotInItems: [DepotInItem]
  # 入库日志
  billStatusLogs: [BillStatusLog]
  # 操作人
  user: User
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type DepotInConnection implements Pagination, Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [DepotIn]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [DepotInWrapper]
}

type DepotInWrapper implements EdgeType {
  cursor: String
  node: DepotIn
}

# 入库商品
type DepotInItem implements Entity {
  id: ID
  # 入库单号
  depotInNo: String
  # 商品编码
  sn: String
  # 预计到货数量
  predictArriveQuantity: Int
  # 实际到货数量
  realityArriveQuantity: Int
  # 良品数量
  goodCommodityQuantity: Int
  # 不良品数量
  badCommodityQuantity: Int
  # 批次号
  batchNumner: String
  # 生产时间
  productTime: Date
  # 到货时间
  arriveTime: Date
  # 收货时间
  receiveTime: Date
  # 入库时间
  inDepotTime: Date
  # 商品
  product: Product
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 出库
type DepotOut implements Entity {
  id: ID
  # 订单号
  orderNo: String
  # 出库单号
  depotOutNo: String
  # 出货类型
  depotBillType: DepotOutType
  # 大小件
  productSize: ProductSize
  # 出货状态
  depotOutStatus: DepotOutStatus
  # 拣货时间
  pickTime: Date
  # 复合时间
  reviewTime: Date
  # 交接时间
  transferTime: Date
  # 出库时间
  depotOutTime: Date
  # 快递公司
  expressCropName: String
  # 运单号
  expressNo: String
  # 是否需要发票
  isNeedInvoice: WhetherStatus
  # 发票ID
  invoiceId: String
  # 收货地址ID
  receiverId: ID
  # 收货人姓名
  shipName: String
  # 收货地区存储
  shipArea: Area
  # 收货地址
  shipAddress: String
  # 收货邮编
  shipZipCode: String
  # 收货手机
  shipMobile: String
  # 送货时间
  shipTime: String
  #　发票类别
  invoiceType: InvoiceType
  # 发票内容
  invoiceContent: String
  # 发票抬头
  invoiceTitle: String
  # 纳税人识别号
  taxpayerIdentificationNumber: String
  # 发票金额
  invoiceAmount: Float
  # 发票代码
  invoiceCode: String
  # 发票号码
  invoiceNum: String
  # 备注
  remarks: String
  # 出库商品
  depotOutItems: [DepotOutItem]
  # 出库日志
  billStatusLogs: [BillStatusLog]
  # 供应商
  merchant: Merchant
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type DepotOutConnection implements Pagination, Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [DepotOut]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [DepotOutWrapper]
}

type DepotOutWrapper implements EdgeType {
  cursor: String
  node: DepotOut
}

#　出库商品
type DepotOutItem implements Entity {
  id: ID
  # 出库单号
  depotOutNo: String
  # 单个商品出货状态
  depotOutStatus: DepotOutStatus
  # 商品编码
  sn: String
  # 商品名称
  productName: String
  # 货品类型
  productSize: ProductSize
  # 单位
  unitType: UnitType
  # 仓库良品库存-订单中商品的数量
  orderQuantity: Int
  # 运单可用数量
  wayBillCanUseQuantity: Int
  # 拣货数量
  pickQuantity: Int
  # 复核数量
  reviewQuantity: Int
  # 交接数量
  transferQuantity: Int
  # 出库数量
  depotOutQuantity: Int
  # 积分抵扣金额
  pointDeductionPrice: Float
  # 优惠券抵扣金额
  couponDeductionPrice: Float
  # 结算价
  settlePrice: Float
  # 促销价小计
  SubtotalPrice: Float
  # 积分抵扣金额小计
  SubtotalPointDeductionPrice: Float
  # 结算价小计
  SubtotalsettlePrice: Float
  # 活动id
  activityId: ID
  # 商品信息
  product: Product
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 入库单状态
enum DepotInStatus {
  # 新增
  create
  # 到货
  arrivalOfGoods
  # 部分到货
  partArrivalOfGoods
  # 收货完成
  finshTakeDelivery
  # 部分收货
  partTakeDelivery
  # 关闭
  close
  # 取消
  cancel
  # 反确认到货
  reverseArrivalOfGoods
}

# 出库状态
enum DepotOutStatus {
  # 新增
  create
  # 捡货完成
  pickFinsh
  # 部分拣货
  pichPart
  # 复核完成
  reviewFinsh
  # 部分复核
  reviewPart
  # 交接完成
  transferFinsh
  # 部分交接
  transferPart
  # 关闭
  close
  # 取消
  cancel
  # 反确认拣货
  reversePickFinsh
  # 部分发货
  sendPart
}

# 出库类型
enum DepotOutType {
  # 销售出库
  saleOut
  # 采购退货
  purchaseReturn
  # 其他出库
  otherOut
}

enum DepotBillType {
  # 销售出库
  saleOut
  # 采购退货
  purchaseReturn
  # 其他出库
  otherOut
  # 采购入库
  purchaseIn
  # 销售退货
  saleReturn
  # 其他入库
  otherIn
}

enum WhetherStatus {
  # 是
  yes
  # 否
  no
}

enum DepotInType {
  # 采购入库
  purchaseIn
  # 销售退货
  saleReturn
  # 其他入库
  otherIn
}

enum TradeType {
  # 增加
  add
  # 减少
  reduce
}

extend type Query {
  # 入库分页
  depotInConnection(page: Int, pageSize: Int, offset: Int, limit: Int, filters: [Filter], sort: Sort): DepotInConnection
  # 入库详情
  depotIn(depotInId: ID!): DepotIn
  # 出库分页
  depotOutConnection(
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): DepotOutConnection
  # 出库详情
  depotOut(depotOutId: ID!): DepotOut
  # 库存分页
  depotConnection(page: Int, pageSize: Int, offset: Int, limit: Int, filters: [Filter], sort: Sort): DepotConnection
  # 出库快递公司
  depotOutExpressNo(depotOutNo: String!): String
  # 库存交易记录分页
  depotTradeRecordConnection(
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): DepotTradeRecordConnection
}

extend type Subscription {
}

input SubmitDepotInInput {
  # 操作人
  userId: ID
  # 单据入库类型
  depotBillType: DepotInType
  # 供应商名字
  supplierName: String
  # 入库商品
  depotInItems: [SubmitDepotInItemInput]
}

input SubmitDepotInItemInput {
  # 商品编码
  sn: String
  # 预计到货数量
  predictArriveQuantity: Int
}

input UpDepotInInput {
  # 操作人
  userId: ID
  # 单据入库 类型
  depotBillType: DepotInType
  # 供应商名字
  supplierName: String
  # 入库单号
  depotInNo: String
  # 入库商品
  depotInItems: [UpDepotInItemInput]
}

input UpDepotInItemInput {
  # 入库商品主键
  id: ID
  # 实际到货数量
  realityArriveQuantity: Int
  # 良品数量
  goodCommodityQuantity: Int
  # 不良品数量
  badCommodityQuantity: Int
  # 生产时间
  productTime: String
  # 到货时间
  arriveTime: String
  # 收货时间
  receiveTime: String
  # 入库时间
  inDepotTime: String
}

input UpDepotOutInput {
  # 发票代码
  invoiceCode: String
  # 发票号码
  invoiceNum: String
}

# this schema allows the following mutation:
extend type Mutation {
  # 新增入库信息
  submitDepotIn(entity: SubmitDepotInInput!): DepotIn
  # 修改入库信息
  upDepotIn(depotInId: ID!, entity: UpDepotInInput!): DepotIn
  # 修改入库状态
  upDepotInStatus(depotInIds: [ID]!, status: DepotInStatus, userId: ID): Void
  # 修改出库信息
  upDepotOut(depotOutId: ID!, entity: UpDepotOutInput!): DepotOut
  # 修改出库状态
  upDepotOutStatus(depotOutIds: [ID]!, status: DepotOutStatus, userId: ID): Void
}
# 商城订单
type MallOrder implements Entity {
  id: ID
  # 订单编号
  sn: String
  # 订单编号，由支付平台传过来
  payOrderNo: String
  # 订单类型,预留字段
  type: String
  # 订单状态
  orderStatus: MallOrderStatus
  # 支付状态
  paymentStatus: MallPaymentStatus
  # 发货状态
  shippingStatus: ShippingStatus
  # 订单总额
  totalAmount: Float
  # 已付金额
  paidAmount: Float
  # 总商品重量(单位: 克)
  totalWeight: Int
  # 总商品数量
  totalQuantity: Int
  # 运单号
  wayBillNo: String
  # 是否开发票
  invoice: Boolean
  # 发票号
  invoiceNum: String
  # 发票金额
  invoiceAmount: Float
  # 发票代码
  invoiceCodeNum: String
  # 发票内容
  invoiceContent: String
  # 发票类别：个人，公司
  invoiceType: InvoiceType
  # 发票类型
  invoiceTag: String
  # 发票抬头
  invoiceHead: String
  # 纳税人识别码
  invoiceCode: String
  # 发票id
  invoiceId: String
  # 收货时间
  shipTime: ShipTimeType
  # 收货人姓名
  shipName: String
  # 收货地区存储
  shipArea: Area
  # 收货地址
  shipAddress: String
  # 收货邮编
  shipZipCode: String
  # 收货手机
  shipMobile: String
  # 送货时间
  shipTime: String
  # 买家附言
  memo: String
  # 备注信息
  note: String
  # 订单来源
  sourceType: SourceType
  # 快递公司id
  deliveryCorpId: ID
  # 快递公司
  expressCompany: ExpressCompany
  # 配送费用
  deliveryFee: Float
  # 支付方式名称
  paymentConfigName: String
  # 会员ID
  memberId: ID
  # 地区ID
  areaId: String
  # 会员
  member: Personal
  # 订单支付信息
  orderItems: [MallOrderItem]
  # 工单信息
  workOrders: [WorkOrder]
  appOrderStatus: AppOrderStatusEnum
  # 订单日志
  billStatusLogs: [BillStatusLog]
  # 付款时间
  paymentTime(format: String): Date
  # 退款时间
  refundTime(format: String): Date
  # 发货时间
  shippingTime(format: String): Date
  # 取消时间
  cancelTime(format: String): Date
  # 收货时间
  receiveTime(format: String): Date
  uuid: String
  creator: String
  modifier: String
  createTime(format: String): Date
  modifyTime(format: String): Date
}

type MallOrderConnection implements Pagination, Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [MallOrder]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [MallOrderWrapper]
}

type MallOrderWrapper implements EdgeType {
  cursor: String
  node: MallOrder
}

# 订单项
type MallOrderItem implements Entity {
  id: ID
  #　商品货号
  sn: String
  # 商品名称
  name: String
  # 商品数量
  productQuantity: Int
  # 发货数量
  deliveryQuantity: Int
  # 商品价格,正常售价
  price: Float
  # 促销价
  promotionPrice: Float
  # 结算价
  settlePrice: Float
  # 积分抵扣金额
  pointDeductionPrice: Float
  # 优惠券抵扣金额
  couponDeductionPrice: Float
  # 参加的活动
  activityType: ActivityType
  # 商城订单
  order: MallOrder
  # 商品
  product: Product
  # 重量小计
  subtotalWeight: Int
  # 正常售价小计
  subtotalPrice: Float
  # 促销价小计
  subtotalPromotionPrice: Float
  # 积分抵扣金额小计
  subtotalPointDeductionPrice: Float
  # 优惠券抵扣金额小计
  subtotalCouponDeductionPrice: Float
  # 结算价小计
  subtotalSettlePrice: Float
  uuid: String
  creator: String
  modifier: String
  createTime(format: String): Date
  modifyTime(format: String): Date
}

# 工单表
type WorkOrder implements Entity {
  id: ID
  # 操作人
  user: User
  # 工单状态
  workOrderStatus: WorkOrderStatus
  # 工单标识
  workOrderTag: WorkOrderTag
  # 工单内容
  workOrderTagValue: String
  # 记录内容
  content: String
  # 备注
  note: String
  # 订单
  order: MallOrder
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 订单状态（未处理、已处理、已完成、已作废）
enum MallOrderStatus {
  # 待付款：下单成功
  waitpay
  # 已付款：付款成功
  payed
  # 待发货：推单成功
  waitship
  # 已发货
  shiped
  # 待收货：发货成功
  waitreceive
  # 部分收货：一单多包，包裹没有全部签收
  partreceive
  # 待评价：已全部收货
  waitappraise
  # 已完成：已完成评价
  finished
  # 已退回仓库：包裹已退回仓库
  rollbacked
  # 已取消
  canceled
  # 已退款：已付款后又取消的订单状态退款之后变成已退款。
  refunded
}

# 付款状态（未支付、部分支付、已支付、部分退款、全额退款）
enum MallPaymentStatus {
  # 未支付
  unpaid
  # 部分支付
  partpayment
  # 已支付
  payed
  # 部分退款
  partrefund
  # 全额退款
  refunded
}

# 配送状态（未发货、部分发货、已发货、部分退货、已退货）
enum ShippingStatus {
  # 待发货
  waitship
  # 部分发货
  partshipped
  # 已发货
  shiped
  # 部分退货
  partreshiped
  # 已退货
  reshiped
  # 待收货
  waitreceive
  # 部分收货
  partreceive
}

enum SourceType {
  # IOS订单
  ios
  # Android订单
  android
  # PC订单
  pc
}

# 工单状态
enum WorkOrderStatus {
  # 已受理
  waitpay
  # 处理中
  canceled
  # 已完结
  payed
}

# 工单标识
enum WorkOrderTag {
  tag1
  tag2
  tag3
  tag4
  tag5
  tag6
  tag7
  tag8
  tag9
  tag10
}

# 参加活动
enum ActivityType {
  # 暂无
  none
  # 促销
  promotion
  # 打折
  discount
}

# 订单类型
enum SubmitType {
  # 直接购买
  product
  # 购物车
  cart
}

enum AppOrderStatusEnum {
  # 待付款
  waitpay
  # 待发货
  waitship
  # 待收货
  waitreceive
  # 部分收货
  partreceive
  # 待评价
  waitappraise
  # 已完成
  finished
  # 已取消
  canceled
  # 退款成功
  refunded
}

enum ShipTimeType {
  # 只工作日送货（双休日、节假日不用送）
  workday
  # 只双休日、节假日送货（工作日不用送）
  holiday
  # 工作日、双休日和节假日均可送货
  everday
}

enum InvoiceType {
  # 个人
  person
  # 公司
  company
}

extend type Query {
  # 商城订单分页
  mallOrderConnection(
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): MallOrderConnection
  # 商城订单
  mallOrder(orderId: ID!): MallOrder
}

input SubmitMallOrderInput {
  memberId: ID!
  receiverId: ID
  sourceType: SourceType
  # 订单类型
  submitType: SubmitType!
  # 收货时间
  shipTime: ShipTimeType!
  # 购物车商品数量
  items: [MallOrderItemInput]
  # 发票信息
  invoiceForm: MallOrderInvoiceInput
}

input MallOrderItemInput {
  # 商品ID
  productId: ID!
  # 商品数量
  quantity: Int!
}

# 商城发票
input MallOrderInvoiceInput {
  # 发票内容
  invoiceContent: String
  # 发票类型
  invoiceType: InvoiceType
  # 发票抬头
  invoiceHead: String
  # 纳税人识别码
  invoiceCode: String
}

# 新增工单
input SubmitWorkOrderInput {
  # 操作人
  operator: ID!
  # 工单状态
  workOrderStatus: WorkOrderStatus
  # 工单标识
  workOrderTag: WorkOrderTag
  # 问题描述
  content: String
}

extend type Mutation {
  # 添加商品订单
  submitMallOrder(entity: SubmitMallOrderInput!): MallOrder
  # 取消商城订单
  removeMallOrder(orderIds: [ID]!): MallOrder
  # 修改商城订单快递公司
  upDeliveryMallOrder(orderId: ID!, deliveryCorpId: ID!): MallOrder
  # 添加工单
  submitWorkOrder(orderId: ID!, entity: SubmitWorkOrderInput!): BooleanResponse
  # 确认收货
  upMallOrderStatusWappraise(orderId: ID!): BooleanResponse
}
# 商品预览时的图片
type GoodsImage implements FileEntity {
  # 排序
  sort: Int
  # 获得商品图片（原）路径
  sourceImagePath: String
  # 获得商品图片（小）路径
  smallImagePath: String
  # 获得商品图片（大）路径
  bigImagePath: String
  # 获得商品图片（缩略）路径
  thumbnailImagePath: String
  path: String
  name: String
  ext: String
  contentType: String
  description: String
  size: String
  key: String
}

# 商品组
type Goods implements Entity {
  id: ID
  # 商品编号
  sn: String
  # 商品名称
  name: String
  # 商品英文名称
  engname: String
  # 商品标题，简介
  title: String
  # 销售价
  price: Float
  # 成本价
  cost: Int
  # 市场价(指导价格)
  marketPrice: Float
  # 商品重量(单位: 克)
  weight: Int
  # 真实库存
  store: Int
  # 虚拟库存
  virtualStore: Int
  # 被占用库存数
  freezeStore: Int
  # 月销量(近30天的)
  monthSaleCount: Int
  # 销量(总)
  saleCount: Int
  # 积分
  score: Int
  # 是否上架
  marketable: Boolean
  # 产品介绍(基本概况)
  introduction: String
  # 评论数
  appraiseCount: Int
  # 页面关键词
  metaKeywords: String
  # 页面描述
  metaDescription: String
  # 商品图片存储
  goodsImages: [GoodsImage]
  # 品牌
  brand: Brand
  # 货品
  products: [Product]
  # 商品所属分类
  category: GoodsCategory
  # 是否启用商品规格
  specificationEnabled: Boolean
  # 商品规格值
  specificationValues: [SpecificationValue]
  # 商品关注次数
  browseCount: Int
  # 自定义商品属性
  customAttributes: [Attribute]
  # 所属店铺信息
  shop: Shop
  # 所属商家
  merchant: Merchant
  # 获取默认商品图片（缩略图）
  defaultThumbnailGoodsImagePath: String
  # 获取商品图片集合
  defaultGoodsImage: GoodsImage
  # 获取默认商品图片（小）
  defaultSmallGoodsImagePath: String
  # 获取默认商品图片（大）
  defaultBigGoodsImagePath: String
  # 获取默认商品图片地址
  defaultGoodsImagePath: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type GoodsConnection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Goods]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [GoodsWrapper]
}

type GoodsWrapper {
  cursor: String
  node: Goods
}

# 品牌
type Brand implements Entity {
  id: ID
  # 名称
  name: String
  # 商品英文名称
  engname: String
  # 图片存储位置
  logo: Image
  # 网址
  url: String
  # 介绍
  introduction: String
  # 所属国家
  nation: String
  # 品牌对应的商品
  goods: [Goods]
  # 商品分类
  goodsCategories: [GoodsCategory]
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 货品表
type Product implements Entity {
  id: ID
  # 货品编号
  sn: String
  # 名称
  name: String
  # 销售价,售卖价格
  price: Float
  # 成本价
  cost: Float
  # 市场价
  marketPrice: Float
  # 商品重量(单位: 克)
  weight: Int
  # 被占用库存数
  freezeStore: Int
  # 货位
  storePlace: String
  # 是否上架
  marketable: Boolean
  # 是否默认
  default: Boolean
  # 商品规格id
  specid: ID
  # 商品规格id
  specpid: ID
  # 货品类型
  productSize: ProductSize
  # 单位类型
  unitType: UnitType
  # 删除标记
  delflag: Delflag
  # 商品
  goods: Goods
  # 到货通知
  goodsNotifys: [GoodsNotify]
  # 购物车项
  cartItems: [CartItem]
  # 订单项
  orderItems: [MallOrderItem]
  # 商品评论
  appraises: [ProductAppraise]
  # 评论数
  appraiseCount: Int
  # 商品图片
  goodsImage: GoodsImage
  # 真实库存
  store: Int
  # 虚拟库存
  virtualStore: Int
  # 库存预警数
  storeWarnCount: Int
  # 保质期控制
  validity: Boolean
  # 保质期天数
  validityDays: Int
  # 保质期阀值
  validityThreshold: Int
  # 积分
  score: Int
  # 商品所属分类
  category: GoodsCategory
  # 所属商家/供应商
  merchant: Merchant
  # 产品介绍(基本概况)
  introduction: String
  # 排序
  sort: Int
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type ProductConnection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Product]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [ProductWrapper]
}

type ProductWrapper {
  cursor: String
  node: Product
}

# 到货通知
type GoodsNotify implements Entity {
  id: ID
  memberId: ID
  # 通知E-mail
  email: String
  # 发送时间
  sendDate: Date
  # 是否已发送
  sent: Boolean
  # 货品
  product: Product
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 购物车项
type CartItem implements Entity {
  id: ID
  # 数量
  quantity: Int
  # 价格
  price: Float
  # 货品
  product: Product
  # 所属购物车
  #cart: Cart
  preferentialPrice: Float
  subtotalPrice: Float
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type CartItemConnection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [CartItem]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [CartItemWrapper]
}

type CartItemWrapper {
  cursor: String
  node: CartItem
}

# 购物车
type Cart implements Entity {
  id: ID
  # 购物车对于的用户信息
  owner: String
  # 购物车所有者类型
  ownerType: OwnerType
  # 购物车项
  cartItems: [CartItem]
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 商品分类
type GoodsCategory implements Entity {
  id: ID
  # 分类名称
  name: String
  # 分类标识
  sign: String
  # 页面关键词
  metaKeywords: String
  # 页面描述
  metaDescription: String
  # 排序
  sort: Int
  # 树路径
  path: String
  # 层级
  layer: Int
  # 上级分类
  parent: GoodsCategory
  # 下级分类
  children: [GoodsCategory]
  # 商品组
  goods: [Goods]
  # 商品品牌
  brands: [Brand]
  # 品牌在分类中的排序规则,存储的是品牌的id
  brandCustomSort: String
  # 商品属性
  attributes: [Attribute]
  # 状态
  delflag: Delflag
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type GoodsCategoryConnection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [GoodsCategory]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [GoodsCategoryWrapper]
}

type GoodsCategoryWrapper {
  cursor: String
  node: Goods
}

# 商品组属性
type Attribute implements Entity {
  id: ID
  # 名称
  name: String
  # 值
  value: String
  # 格式
  format: String
  # 排序
  sort: Int
  # 备注
  remark: String
  # 商品分类
  goodsCategories: [GoodsCategory]
  # 商品
  goods: [Goods]
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 店铺表
type Shop implements Entity {
  id: ID
  # 店铺名称
  name: String
  # 店铺标题
  title: String
  # 关键词
  metaKeywords: String
  # 描述
  metaDescription: String
  # 图片存储位置
  logo: Image
  # 店铺状态
  status: ShopStatus
  # 店铺对应的商品
  goods: [Goods]
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 商家
type Merchant implements Entity {
  id: ID
  # 商家名称
  name: String
  # 商家编号
  sn: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type MerchantConnection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Merchant]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [MerchantWrapper]
}

type MerchantWrapper {
  cursor: String
  node: Merchant
}

# 商品规格
type Specification implements Entity {
  id: Int
  # 名称
  name: String
  # 代码
  code: String
  # 商品规格类型
  type: SpecificationType
  # 排序
  sort: Int
  # 备注
  remark: String
  # 规格详情
  specificationItems: [SpecificationItem]
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 规格详情
type SpecificationItem implements Entity {
  id: Int
  # 商品规格值
  value: String
  # 单位
  unit: String
  # 排序
  sort: Int
  # 所属规格
  specification: Specification
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 商品规格
type SpecificationValue {
  # 规格id
  id: Int
  # 规格的父id
  pid: Int
  #　库存
  store: Int
}

type SpecificationConnection implements Pagination, Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Specification]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [SpecificationWrapper]
}

type SpecificationWrapper implements EdgeType {
  cursor: String
  node: Specification
}

# 商品评论
type ProductAppraise implements Entity {
  id: ID
  # 评价状态
  appraiseStatus: AppraiseStatus
  # 会员ID
  memberId: ID
  # 会员
  member: Personal
  # 商品ID
  productId: ID
  # 商品
  product: Product
  # 评论内容
  content: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type ProductAppraiseConnection implements Pagination, Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [ProductAppraise]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [ProductAppraiseWrapper]
}

type ProductAppraiseWrapper implements EdgeType {
  cursor: String
  node: ProductAppraise
}

type Carousel implements Entity {
  id: ID
  # 轮播图状态
  carouselStatus: CarouselStatus
  # 轮播图片
  carouselImage: CarouselImage
  # 轮播图权重
  power: Int
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type CarouselConnection implements Pagination, Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Carousel]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [CarouselWrapper]
}

type CarouselWrapper implements EdgeType {
  cursor: String
  node: Carousel
}

# 商品轮播图片
type CarouselImage implements FileEntity {
  # 排序
  sort: Int
  path: String
  name: String
  ext: String
  contentType: String
  description: String
  size: String
  key: String
}

# 快递公司
type ExpressCompany implements Entity {
  id: ID
  # 快递单状态
  expressStatus: ExpressStatus
  # 快递公司名字
  companyName: String
  # 快递公司编号
  companyNumber: String
  # 操作人
  user: User
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type ExpressCompanyConnection implements Pagination, Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [ExpressCompany]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [ExpressCompanyWrapper]
}

type ExpressCompanyWrapper implements EdgeType {
  cursor: String
  node: ExpressCompany
}

# 订单，出/入库单，运单修改状态记录
type BillStatusLog implements Entity {
  id: ID
  # 订单ID
  billId: ID
  # 订单号
  sn: String
  # 订单类型
  billType: BillType
  # 旧状态
  oldStatus: String
  # 新状态
  newStatus: String
  # 备注信息
  note: String
  # 操作人
  user: User
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type BillStatusLogConnection implements Pagination, Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [BillStatusLog]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [BillStatusLogWrapper]
}

type BillStatusLogWrapper implements EdgeType {
  cursor: String
  node: BillStatusLog
}

# 货品类型
enum ProductSize {
  # 大件
  big
  # 小件
  small
}

# 购物车保存类型
enum OwnerType {
  # 会员
  Member
  # cookie
  Cookie
}

# 店铺状态
enum ShopStatus {
  # 禁用
  disable
  # 启用
  enable
}

# 商品规格类型（文字类型、图片类型）
enum SpecificationType {
  # 文字类型
  text
  # 图片类型
  picture
}

# 商品评价
enum AppraiseStatus {
  # 差评
  BAD
  # 中评
  MIDDLE
  # 好评
  GOOD
}

# 轮播图展示状态
enum CarouselStatus {
  # 隐藏
  hidden
  # 显示
  show
}

# 快递公司状态
enum ExpressStatus {
  # 启用
  enable
  # 禁用
  disable
}

enum UnitType {
  # 个
  ge
  # 件
  piece
  # 箱
  box
  # 颗
  grain
  # 台
  tai
}

# 订单类型
enum BillType {
  # 销售订单
  sale
  # 出库单
  stockOut
  # 入库单
  stockIn
  # 运单
  waybill
  # 追踪运单
  traceWaybill
}

extend type Query {
  # 商品组查询
  goods(goodsId: ID!): Goods
  # 商品组列表
  goodses(page: Int, pageSize: Int, offset: Int, limit: Int, filters: [Filter], sort: Sort): [Goods]
  # 商品组分页
  goodsConnection(page: Int, pageSize: Int, offset: Int, limit: Int, filters: [Filter], sort: Sort): GoodsConnection
  # 商品列表
  products(goodsId: ID, page: Int, pageSize: Int, offset: Int, limit: Int, filters: [Filter], sort: Sort): [Product]
  # 商品详情
  product(productId: ID!): Product
  # 商品分页
  productConnection(page: Int, pageSize: Int, offset: Int, limit: Int, filters: [Filter], sort: Sort): ProductConnection
  # 商品分类列表
  goodsCategorys(page: Int, pageSize: Int, offset: Int, limit: Int, filters: [Filter], sort: Sort): [GoodsCategory]
  # 商品分类分页
  goodsCategoryConnection(
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): GoodsCategoryConnection
  # 商品评论分页
  productAppraiseConnection(
    productId: ID!
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): ProductAppraiseConnection
  # 商品组评论分页
  goodsAppraiseConnection(
    goodsId: ID!
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): ProductAppraiseConnection
  # 购物车分页
  cartItemConnection(
    memberId: ID!
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): CartItemConnection
  # 商品轮播列表
  carousels(page: Int, pageSize: Int, offset: Int, limit: Int, filters: [Filter], sort: Sort): [Carousel]
  # 商品轮播分页
  carouselConnection(
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): CarouselConnection
  # 商家列表
  merchants(page: Int, pageSize: Int, offset: Int, limit: Int, filters: [Filter], sort: Sort): [Merchant]
  # 商家分页
  merchantConnection(
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): MerchantConnection
  # 商家详情
  merchant(merchantId: ID!): Merchant
  # 快递公司列表
  expressCompanies(page: Int, pageSize: Int, offset: Int, limit: Int, filters: [Filter], sort: Sort): [ExpressCompany]
  # 快递公司分页
  expressCompanyConnection(
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): ExpressCompanyConnection
  # 商品规格列表
  ##specifications(offset: Int,limit: Int): [Specification]
  # 商品规格分页
  ##specificationConnection(offset: Int,limit: Int,filter: String): SpecificationConnection
}

input SpecificationValueInput {
  id: Int
  pid: Int
  store: Int
}

input GoodsImageInput {
  path: String
  name: String
  size: Int
  sort: Int
  sourceImagePath: String
  smallImagePath: String
  bigImagePath: String
  thumbnailImagePath: String
}

input GoodCategoryInput {
  id: ID
}

input SubmitGoodsInput {
  category: GoodCategoryInput
  name: String
  engname: String
  title: String
  price: Float
  cost: Int
  marketPrice: Float
  marketable: Boolean
  weight: Float
  score: Int
  introduction: String
  metaKeywords: String
  metaDescription: String
  specificationEnabled: String
  specificationValues: [SpecificationValueInput]
  goodsImages: [GoodsImageInput]
}

input UpGoodsInput {
  category: GoodCategoryInput
  name: String
  engname: String
  title: String
  price: Float
  cost: Int
  marketPrice: Float
  weight: Float
  score: Int
  introduction: String
  metaKeywords: String
  metaDescription: String
  specificationEnabled: String
  specificationValues: [SpecificationValueInput]
  goodsImages: [GoodsImageInput]
}

input SubmitProductInput {
  # 关联商品组
  goods: ProductGoodsInput
  # 供应商
  merchant: MerchantInput
  # 名称
  name: String
  # 销售价,售卖价格
  price: Float
  # 成本价
  cost: Float
  # 市场价
  marketPrice: Float
  # 商品重量(单位: 克)
  weight: Int
  # 单位类型
  unitType: UnitType
  # 被占用库存数
  freezeStore: Int
  # 货位
  storePlace: String
  # 商品介绍
  introduction: String
  # 库存预警数
  storeWarnCount: Int
  # 保质期控制
  validity: Boolean
  # 保质期天数
  validityDays: Int
  # 保质期阀值
  validityThreshold: Int
  # 是否上架
  marketable: Boolean
  # 是否默认
  default: Boolean
  # 货品类型
  productSize: ProductSize
  goodsImage: FileInput
}

# 关联商品组
input ProductGoodsInput {
  # 商品组ID
  id: ID
}

# 关联供应商
input MerchantInput {
  # 供应商ID
  id: ID
}

input UpProductInput {
  # 关联商品组
  goods: ProductGoodsInput
  # 供应商
  merchant: MerchantInput
  # 名称
  name: String
  # 商品重量(单位: 克)
  weight: Int
  # 货位
  storePlace: String
  # 是否默认
  default: Boolean
  # 单位类型
  unitType: UnitType
  # 货品类型
  productSize: ProductSize
  # 销售价,售卖价格
  price: Float
  # 成本价
  cost: Float
  # 市场价
  marketPrice: Float
  # 库存预警数
  storeWarnCount: Int
  # 商品介绍
  introduction: String
  # 保质期控制
  validity: Boolean
  # 保质期天数
  validityDays: Int
  # 保质期阀值
  validityThreshold: Int
  # 积分
  score: Int
  goodsImage: FileInput
}

input UpProductPriceInput {
  # 销售价,售卖价格
  price: Float
  # 成本价
  cost: Float
  # 市场价
  marketPrice: Float
}

input UpProductUvstoreInput {
  # 库存操作
  status: StoreOperation
  # 变化数量
  changeNumber: Int
}

input SubmitGoodsCategoryInput {
  # 分类名称
  name: String
  # 分类标识
  sign: String
  # 父类ID
  parentId: ID
}

input UpGoodsCategoryInput {
  # 分类名称
  name: String
}

# 订单评价
input SubmitOrderAppraisesInput {
  # 商品评价
  productAppraises: [ProductAppraiseInput]!
  # 客服评价
  serveGraded: Int!
  # 物流评价
  expressGraded: Int!
}

# 商品评价
input ProductAppraiseInput {
  appraiseStatus: AppraiseStatus!
  memberId: ID!
  productId: ID!
  content: String!
}

# 商品与商品组关系
input SubmitProductToGoodsInput {
  # 商品组ID
  goodsId: ID
  # 商品ID
  productId: ID
}

# 新增购物车商品
input SubmitCartItemInput {
  # 会员ID
  memberId: ID
  # 商品ID
  productId: ID
  # 数量
  quantity: Int
}

# 更新购物车商品
input UpCartItemInput {
  # 商品ID
  productId: ID
  # 数量
  quantity: Int
}

# 新增轮播图
input SubmitCarouselInput {
  carouselStatus: CarouselStatus
  power: Int
  carouselImage: FileInput
}

# 修改轮播图
input UpCarouselInput {
  carouselStatus: CarouselStatus
  power: Int
  carouselImage: FileInput
}

# 新增商家
input SubmitMerchantInput {
  # 操作人
  userId: ID!
  # 商家名称
  name: String
  # 商家编号
  sn: String
}

# 修改商家
input UpMerchantInput {
  # 操作人
  userId: ID!
  # 商家名称
  name: String
  # 商家编号
  sn: String
}

# this schema allows the following mutation:
extend type Mutation {
  # 新增商品组
  submitGoods(entity: SubmitGoodsInput!): Goods
  # 更新商品组
  upGoods(goodsId: ID!, entity: UpGoodsInput!): Goods
  # 删除商品组
  removeGoods(goodsId: ID!): BooleanResponse
  # 商品组上/下架
  upGoodsMarketable(goodsId: ID!, marketable: Boolean!): Goods
  # 新增商品
  submitProduct(entity: SubmitProductInput!): Product
  # 更新商品基础信息
  upProduct(productId: ID!, entity: UpProductInput!): Product
  # 更新商品价格信息
  # upProductPrice(productId:ID!,entity:UpProductPriceInput!): Product
  # 更新商品虚拟库存
  upProductUvstore(productId: ID!, entity: UpProductUvstoreInput!): Product
  # 商品上/下架
  upProductMarketable(productId: ID!, marketable: Boolean!): Product
  # 删除商品
  removeProduct(productId: ID): BooleanResponse
  # 新增商品分类
  submitGoodsCategory(entity: SubmitGoodsCategoryInput!): GoodsCategory
  # 更新商品分类
  upGoodsCategory(categoryId: ID!, entity: UpGoodsCategoryInput!): GoodsCategory
  # 删除商品分类
  removeGoodsCategory(categoryId: ID!): BooleanResponse
  # 保存商品评论
  submitOrderAppraises(orderId: ID!, entity: SubmitOrderAppraisesInput!): BooleanResponse
  # 商品与商品组关系
  submitProductToGoods(entity: SubmitProductToGoodsInput!): BooleanResponse
  # 更新商品排序 0升序 1降序
  upProductSort(productId: ID!, sort: Int!): BooleanResponse
  # 新增购物车商品
  submitCartItem(entity: SubmitCartItemInput!): CartItem
  # 更新购物车商品
  upCartItem(memberId: ID!, entity: [UpCartItemInput]!): BooleanResponse
  # 删除购物车商品
  removeCartItem(cartItemIds: [ID]!): BooleanResponse
  # 新增轮播图
  submitCarousel(entity: SubmitCarouselInput!): Carousel
  # 修改轮播图
  upCarousel(carouselId: ID!, entity: UpCarouselInput!): Carousel
  # 删除轮播图
  removeCarousel(carouselId: ID!): BooleanResponse
  # 增加关注数
  upBrowseCount(goodsId: ID!): BooleanResponse
  # 新增商家
  submitMerchant(entity: SubmitMerchantInput!): Merchant
  # 更新商家
  upMerchant(merchantId: ID!, entity: UpMerchantInput!): Merchant
  # 删除商家
  removeMerchant(merchantId: ID!): BooleanResponse
  # 新增快递公司
  submitExpressCompany(userId: ID!, companyName: String!): ExpressCompany
  # 更新快递公司状态
  upExpressCompanyStatus(expressCompanyId: ID!, userId: ID!, status: ExpressStatus!): Void
}

type ProductSubscription implements SubscriptionInfo {
  type: SubscriptionType
  data: Product
}

extend type Subscription {
  productUpdate: ProductSubscription
}
type Waybill implements Entity {
  id: ID
  # 运单编号
  sn: String
  # 运单状态
  waybillStatus: WaybillStatus
  # 商城订单
  order: MallOrder
  # 出库单sn
  depotOutSn: String
  # 出库信息
  depotOut: DepotOut
  # 快递公司
  expressCompany: ExpressCompany
  # 运费
  deliveryFee: Float
  # 包裹费
  packPrice: Float
  # 实际重量（kg）
  realityWeight: Float
  # 理论重量（kg）
  theoryWeight: Float
  # 长度（cm）
  length: Int
  # 宽（cm）
  width: Int
  # 高（cm）
  height: Int
  # 引用运单的详情
  waybillItems: [WaybillItem]
  # 出库时间
  depotOutTime: Date
  # 复核时间
  reexamineTime: Date
  # 交接时间
  associateTime: Date
  # 备注
  annotation: String
  # 运单日志
  billStatusLogs: [BillStatusLog]
  # 操作人
  user: User
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type WaybillConnection implements Pagination, Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Waybill]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [WaybillWrapper]
}

type WaybillWrapper implements EdgeType {
  cursor: String
  node: Waybill
}

# 运单项目
type WaybillItem implements Entity {
  id: ID
  # 商品ID
  productId: ID
  # 商品
  product: Product
  # 装箱数量
  packCount: Int
  # 运单
  waybill: Waybill
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 配送追踪
type TraceWaybill implements Entity {
  id: ID
  # 运单
  waybill: Waybill
  # 运单的状态
  traceWaybillStatus: TraceWaybillStatus
  # 签收时间
  receiveTime: Date
  # 追踪日志
  billStatusLogs: [BillStatusLog]
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type TraceWaybillConnection implements Pagination, Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [TraceWaybill]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [TraceWaybillWrapper]
}

type TraceWaybillWrapper implements EdgeType {
  cursor: String
  node: TraceWaybill
}

# 运单状态
enum WaybillStatus {
  # 添加
  add
  # 复核完成
  reexamineEnd
  # 交接完成
  associateEnd
  # 关闭
  close
}

# 跟新运单状态
enum ChangeWaybillStatus {
  # 复核
  REEXAMINE
  # 交接
  ASSOCIATE
  # 出库
  CLOSE
}

# 跟新追踪运单状态
enum ChangeTraceWaybillStatus {
  # 确认收货
  CONFIRM
}

# 配送状态
enum TraceWaybillStatus {
  # 配送中
  send
  # 妥投
  delievred
  # 配送失败
  sendLose
  # 遗失
  loss
  # 退回中
  back
  # 已退回仓库
  yetBack
}

extend type Query {
  # 运单分页
  waybillConnection(page: Int, pageSize: Int, offset: Int, limit: Int, filters: [Filter], sort: Sort): WaybillConnection
  # 运单详情
  waybill(waybillId: ID!): Waybill
  # 配送追踪分页
  traceWaybillConnection(
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): TraceWaybillConnection
  # 配送追踪详情
  traceWaybill(traceWaybillId: ID!): TraceWaybill
}

input SubmitWaybillInput {
  # 操作人
  userId: ID!
  # 出库单ID
  depotOutSn: String!
  # 快递公司ID
  expressId: ID
  # 运单项
  waybillItems: [WaybillItemInput]
}

input UpWaybillInput {
  # 操作人
  userId: ID!
  # 出库单ID
  depotOutSn: String!
  # 快递公司ID
  expressId: ID
  # 运单号
  sn: String
  # 运费
  deliveryFee: Float
  # 实际重量（kg）
  realityWeight: Float
  # 理论重量（kg）
  theoryWeight: Float
  # 长度（cm）
  length: Int
  # 宽（cm）
  width: Int
  # 高（cm）
  height: Int
  # 运单项
  waybillItems: [WaybillItemInput]
}

input WaybillItemInput {
  # 商品ID
  productId: ID!
  # 商品数
  packCount: Int!
}

extend type Mutation {
  # 新增运单
  submitWaybill(entity: SubmitWaybillInput!): Waybill
  # 修改运单
  upWaybill(waybillId: ID!, entity: UpWaybillInput!): Waybill
  # 删除运单(未审核可删除)
  removeWaybill(waybillId: ID!): BooleanResponse
  # 更新运单-复核,交接,出库
  upWaybillStatus(waybillIds: [ID]!, status: ChangeWaybillStatus!, userId: ID): BooleanResponse
  # 更新追踪运单-确认收货
  upTraceWaybillStatus(traceWaybillIds: [ID], status: ChangeTraceWaybillStatus!): BooleanResponse
}

extend type Subscription {
}
#经络仪报告对象查询
type MeridianReport {
  id: Int
  idcard: String
  measure: String
  data: [String]
  username: String
  sex: String
  age: Int
  ethnic: String
  oldmag: String
  # 报告是否绑定用户
  isBind: Boolean
  # 记录详情
  record: Record
  createTime: Date
}

#一体机
type pcMce {
  id: Int
  ur: String
  type: String
  card: String
  # 报告是否绑定用户
  isBind: Boolean
  #身高
  height: Int
  #体重
  weight: Int
  #bmi测试日期
  bmiDetectDate: String
  #bmi值
  bmi: Float
  #身高体重结果
  bmiResult: String
  #bmi值
  bmiCommonCause: String
  #bmi健康建议
  bmiHealthAdvice: String
  #体脂
  fat: String
  #体脂结果
  fatResult: String
  #体脂日期
  fatDetectDate: String
  #体脂常用原因
  fatCommonCause: String
  #体脂健康建议
  fatHealthAdvice: String
  #体温
  temperature: Float
  #体温
  temperatureResult: String
  #体温检测日期
  temperatureDetectDate: String
  #体温常见原因
  temperatureCommonCause: String
  #体温健康建议
  temperatureHealthAdvice: String
  #收缩压
  scPressure: Int
  #舒张压
  dcPressure: Int
  # ???
  pluse: Int
  # ???
  metabolism: String
  #血压监测日期
  pressureDetectDate: String
  #血压结果
  pressureResult: String
  #血压常见原因
  pressureCommonCause: String
  #血压健康建议
  pressureHealthAdvice: String
  #血糖
  blSugar: Float
  #测试状态
  beforeOrAtter: Int
  #血糖监测日期
  bloodDetectDate: String
  #血糖结果
  bloodResult: String
  #血糖常见原因
  bloodCommonCause: String
  #血糖健康建议
  bloodHealthAdvice: String
  #血氧
  oxgen: Int
  #血氧结果
  oxgenResult: String
  #血氧监测日期
  oxgenDetectDate: String
  #血氧常见原因
  oxgenCommonCause: String
  #血氧健康建议
  oxgenHealthAdvice: String
  # 记录详情
  record: Record
  createTime: Date
}

#用户查询对象
type MemberNew {
  name: String
  idcard: String
}

extend type Query {
  #身份证 - 个人
  memberMce(idcard: String, offset: Int, limit: Int): MemberNew
  #报告详情 2 个
  pcMce(id: Int): pcMce
  meridianReport(id: Int): MeridianReport
  pcMceBySn(sn: String): pcMce
  meridianReportBySn(sn: String): MeridianReport
  #报告列表 2 个
  pcMces(idcard: String, offset: Int, limit: Int): [pcMce]
  meridianReports(idcard: String, offset: Int, limit: Int): [MeridianReport]
}

extend type Mutation {
  bindExeReport(personId: ID!, type: String!, entity: [String]!): String
}

extend type Subscription {
}
type Report {
  amount: Int
  count: Int
}

extend type Query {
  # 医生挂号统计
  reportRegistration(name: String, limit: Int): Report
  # 交易统计
  reportTransaction(name: String, limit: Int): Report
  # 退款统计
  reportRefund(name: String, limit: Int): Report
  # 药单退款统计
  reportMedicine(name: String, limit: Int): Report
  # 医生统计
  reportDoctor(name: String, limit: Int): Report
  # 用户业务统计
  reportAnalysis(name: String, limit: Int): Report
  # 用户咨询统计
  reportConsulting(name: String, limit: Int): Report
  # 销售经营报表
  reportSalesManagement(query: String!): JSON
}
type CardConnection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Card]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [CardWrapper]
}

type CardWrapper implements EdgeType {
  cursor: String
  node: Card
}

type Card implements Entity {
  no: String
  usage: String
  status: String
  secret: String
  amount: String
  extras: Extras
  account: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type CardDesignConnection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [CardDesign]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [CardDesignWrapper]
}

type CardDesignWrapper implements EdgeType {
  cursor: String
  node: CardDesign
}

type CardDesign implements Entity {
  key: String
  usage: String
  status: String
  amount: Int
  notes: String
  extras: [Extras]
  rule: String
  cardName: String
  cardType: CardType
  publishTime: String
  cards: [Card]
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type Extras {
  project: String
  value: String
}

type CardTypeConnection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [CardType]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [CardTypeWrapper]
}

type CardTypeWrapper implements EdgeType {
  cursor: String
  node: CardType
}

type CardType implements Entity {
  id: String
  key: String
  name: String
  description: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type CardBatchConnection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [CardBatch]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [CardBatchWrapper]
}

type CardBatchWrapper implements EdgeType {
  cursor: String
  node: CardBatch
}

type CardBatch implements Entity {
  id: Int
  no: String
  name: String
  status: String
  cardType: CardType
  cardDesign: CardDesign
  releaseNotes: String
  cards: [Card]
  releaseCards: [Card]
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

input CardTypeInput {
  id: String
  key: String
  name: String
  description: String
}

input CardDesignInput {
  key: String
  usage: String
  status: String
  amount: Int
  notes: String
  rule: String
  cardName: String
  cardType: CardTypeInput
  publishTime: String
}

input submitCardTypeInput {
  key: String!
  name: String!
  description: String
}

input updateCardTypeInput {
  id: String
  name: String!
  description: String
}

input submitCardDesignInput {
  key: String!
  usage: String
  status: String
  amount: Int
  notes: String
  rule: String
  cardName: String
  cardType: CardTypeInput
  publishTime: String
}

input updateCardDesignInput {
  id: String
  key: String
  usage: String
  status: String
  amount: Int
  notes: String
  rule: String
  cardName: String
  cardType: CardTypeInput
  publishTime: String
}

input submitCardBatchInput {
  no: String!
  name: String
  status: String
  cardType: CardTypeInput
  cardDesign: CardDesignInput
  releaseNotes: String
}

input updateCardBatchInput {
  id: String!
  no: String
  name: String
  status: String
  cardType: CardTypeInput
  cardDesign: CardDesignInput
  releaseNotes: String
}

extend type Mutation {
  submitCardType(entity: submitCardTypeInput!): CardType
  updateCardType(entity: updateCardTypeInput!): CardType
  removeCardType(id: String!): String!
  submitCardDesign(entity: submitCardDesignInput!): CardDesign
  updateCardDesign(entity: updateCardDesignInput!): CardDesign
  submitCardBatch(entity: submitCardBatchInput!): CardBatch
  updateCardBatch(entity: updateCardBatchInput!): CardBatch
}

extend type Query {
  cardsConnection(offset: Int, limit: Int, filter: String): CardConnection
  cardDesignsConnection(offset: Int, limit: Int, filter: String): CardDesignConnection
  cardTypesConnection(offset: Int, limit: Int, filter: String): CardTypeConnection
  cardBatchsConnection(offset: Int, limit: Int, filter: String): CardBatchConnection
  cards(name: String, limit: Int): [Card]
  card(id: String!): Card
  cardDesigns(name: String, limit: Int): [CardDesign]
  cardBatches(name: String, limit: Int): [CardBatch]
  cardTypes(name: String, limit: Int): [CardType]
  cardDesign(id: String!): CardDesign
  cardType(id: String!): CardType
  cardBatch(id: String!): CardBatch
}
enum InvoiceStatus {
  # 未开票
  NONE
  # 处理中
  IN_PROGRESS
  # 完成
  COMPLETE
}

type Invoice implements Entity {
  id: ID
  # 系统流水号
  no: String
  # 发票类型
  type: String
  # 开票状态
  status: InvoiceStatus
  # 发票内容
  content: String
  # 发票抬头
  title: String
  # 开票金额
  amount: Float
  # 快递公司
  logistics: String
  # 快递单号
  shipNo: String
  # 收货人
  shipName: String
  # 收货人电话
  shipTel: String
  # 收货地址
  address: Address
  # 申请人
  uid: String
  # 开票方
  drawer: String
  # 开票项目
  items: [Order]
  # 个人
  personal: Personal
  # 纳税人识别码
  invoiceCode: String
  # 发票代码
  invoiceCodeNum: String
  # 发票号码
  invoiceNum: String
  # 发票类型:增值税普通发票,增值税专用发票
  invoiceTag: String
  uuid: String
  creator: String
  modifier: String
  createTime(format: String): Date
  modifyTime(format: String): Date
}

# 文章分页
type invoicesConnection implements Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Invoice]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [InvoiceWrapper]
}

type InvoiceWrapper implements EdgeType {
  cursor: String
  node: Invoice
}

input UpdateInvoiceInput {
  # 快递公司
  logistics: String
  # 快递单号
  shipNo: String
  # 更新状态
  status: InvoiceStatus!
}

extend type Mutation {
  updateInvoice(id: ID!, entity: UpdateInvoiceInput!): Invoice
}

extend type Query {
  # 发票列表
  invoicesConnection(page: Int, filters: [Filter], pageSize: Int, sort: Sort): invoicesConnection
}
type Payment {
  # 支付ID
  id: ID
  # 第三方交易的交易流水号
  tradeNo: String
  # 支付类型
  type: String
  # 支付时间
  tradeTime: String
}

type OrderConnection implements Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Order]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [OrderWrapper]
}

type OrderWrapper implements EdgeType {
  cursor: String
  node: Order
}

type OrderPrice {
  id: Int
  value: Float
  title: String
  code: String
}

type OrderPayee {
  id: Int
  target: String
  name: String
  value: String
  title: String
  code: String
  type: String
}

enum OrderStatus {
  unpaid
  paid
  refunding
  refunded
  closed
  complete
}

enum OrderPaymentStatus {
  unpaid
  paid
  partRefund
  refunded
  archived
}

enum OrderShippingStatus {
  unshipped
}

enum OrderFlow {
  carveup
}

enum OrderInvoiceStatus {
  # 待开发票
  wait
  # 已提交
  submitted
  # 已处理
  processed
  # 已寄出
  completed
}

type UnifiedUser {
  id: ID
  name: String
  phone: String
}

# 订单详情
type Order implements Entity {
  id: ID
  # 订单号
  sn: String
  # 订单类型
  type: OrderType
  # 订单状态
  status: OrderStatus
  # 支付状态
  paymentStatus: OrderPaymentStatus
  # 配送状态
  shippingStatus: OrderShippingStatus
  # 资金流程状态
  flow: OrderFlow
  # 产品重量
  totalProductWeight: Int
  # 产品数量
  totalProductQuantity: Int
  # 产品原始金额
  totalProductPrice(format: String): Float
  # 支付方式名称
  payConfigName: String
  # 支付方式
  payConfig: PayConfig
  # 配送费
  deliveryAmount(format: String): Float
  # 订单总金额
  totalAmount(format: String): Float
  # 订单应付金额
  payableAmount(format: String): Float
  # 订单实付金额
  paidAmount(format: String): Float
  # 支付时间
  paymentTime(format: String): Date
  # 退款时间
  refundTime(format: String): Date
  # 完成时间
  completionTime: String
  # 用户
  user: UnifiedUser
  # 订单归属的用户
  member: Member @deprecated
  # 个人用户
  personal: Personal @deprecated
  # 付款的金额信息
  prices: [OrderPrice]
  # 涉及到可能的收款人
  payees: [OrderPayee]
  # 过期的分钟数
  expires: Int
  # 付款交易
  paymentTransaction: Transaction
  # 退款交易
  refundTransaction: Transaction
  # 医生姓名
  doctorName: String @deprecated
  # 就诊地址
  address: String @deprecated
  # 就诊日期
  time: String @deprecated
  # 就诊时间
  periodTime: String @deprecated
  #病人ID
  patientId: String @deprecated
  #病人名称
  patientName: String @deprecated
  #病人年龄
  patientAge: Int @deprecated
  #病人生日
  patientBirthday: Date @deprecated
  patientPersonId: ID @deprecated
  #病人手机号
  patientPhone: String @deprecated
  #病人性别
  patientSex: String @deprecated
  #病人身份证
  patientIdCard: String @deprecated
  #订单id
  orderId: String @deprecated
  # 咨询业务订单
  consultOrder: ConsultOrder
  # 发票状态
  invoiceStatus: OrderInvoiceStatus
  # 预约业务订单
  reservationOrder: ReservationOrder
  # 商城业务订单
  mallOrder: MallOrder
  # 药品业务订单
  medicineOrder: Morder
  # 封面图
  cover: String @deprecated
  memberId: ID @deprecated
  # 评论状态
  commentStatus: CommentStatus
  # app订单状态
  appStatus: AppStatus
  uuid: String
  creator: String
  modifier: String
  createTime(format: String): Date
  modifyTime(format: String): Date
}

enum OrderType {
  # 诊疗 - 申请加号
  apply
  # 诊疗 - 咨询
  consulting
  # 商城
  mall
  # 诊疗 - 药单
  medicine
  # 诊疗 - 扫码加号
  plus
  # 充值
  recharge
  # 诊疗 - 预约
  registration
  # 企业充值
  rechargeEnterprise
}

enum AppStatus {
  # 全部
  all
  # 未支付
  unpaid
  # 已支付
  paid
  # 退款中
  refunding
  # 已退款
  refunded
  # 待评价
  unassess
  # 售后
  afterSale
  # 已关闭
  closed
}

# 评论状态
enum CommentStatus {
  # 待评论
  notcomment
  # 已评论
  commented
}

input SubmitOrderInput {
  id: String
  title: String
}

extend type Mutation {
  # 提交订单
  submitOrder(entity: SubmitOrderInput!): Order
  # 删除订单
  removeOrder(id: Int!): Int!
}

extend type Query {
  # 订单详情
  order(id: ID!): Order
  # 订单列表
  orders(offset: Int, limit: Int): [Order]
  # 订单分页
  ordersConnection(
    uid: ID
    type: OrderType
    appStatus: AppStatus
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): OrderConnection
}
type PayProduct {
  id: ID
  name: String
  payMethod: PayMethod
  currencyTypes: [CurrencyType]
  logo: Image
  payConfigs: [PayConfig]
}

# 支付方式 - 钱包支付时需要传递额外参数： params.password
type PayConfig {
  # 唯一标示
  id: ID
  # 支付名称
  name: String
  # 支付方式
  payMethod: PayMethod
  # 对应的支付产品
  payProduct: PayProduct
  # 支付的支付类型
  payTypes: [PayType]
  # 是否为默认支付方式，该字段只在订单支付时有效
  default: Boolean
  # 是否被禁用，该字段只在订单支付时有效
  disabled: Boolean
}

type PayConfigConnection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [PayConfig]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [PayConfigWrapper]
}

type PayConfigWrapper {
  cursor: String
  node: PayConfig
}

type PaymentConnection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Payment]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [PaymentWrapper]
}

type PaymentWrapper {
  cursor: String
  node: Payment
}

type RefundConnection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Refund]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [RefundWrapper]
}

type RefundWrapper {
  cursor: String
  node: Refund
}

type Refund {
  id: ID
  type: String
  status: String
  payConfigName: String
  bankName: String
  totalAmount: Int
  memo: String
  payConfig: PayConfig
  payment: Payment
  order: Order
  transactionId: String
  payConfig: PayConfig
  payment: Payment
}

input submitPayConfigInput {
  payConfigType: String
  pay_method: String
  name: String
  payProductId: String
  bargainorId: String
  bargainorKey: String
  payFeeType: String
  payFee: Int
  sort: Int
  enabled: String
  platforms: String
  signCert: String
  validateCert: String
}

input updatePayConfigInput {
  id: Int
  payConfigType: String
  payMethod: String
  name: String
  payProductId: String
  bargainorId: String
  bargainorKey: String
  payFeeType: String
  payFee: Int
  sort: Int
  enabled: String
  platforms: String
  signCert: String
  validateCert: String
}

input submitPayProductInput {
  id: String!
  name: String
}

extend type Mutation {
  submitPayProduct(entity: submitPayProductInput!): PayProduct
  submitPayConfig(entity: submitPayConfigInput!): PayConfig
  updatePayConfig(entity: updatePayConfigInput!): PayConfig
  removePayConfig(id: Int!): Int
  removePayment(sn: String!): String
  removeRefund(sn: String!): String
}

extend type Query {
  refundsConnection(offset: Int, limit: Int, filter: String): RefundConnection
  payConfigsConnection(offset: Int, limit: Int, filter: String): PayConfigConnection
  paymentsConnection(offset: Int, limit: Int, filter: String): PaymentConnection
  payProducts(name: String, limit: Int): [PayProduct]
  refund(id: String!): Refund
  payConfigs(name: String, limit: Int): [PayConfig]
  payments(name: String, limit: Int): [Payment]
  refunds(name: String, limit: Int): [Refund]
  payment(id: String!): Payment
  payConfig(id: String!): PayConfig
  payProduct(id: String!): PayProduct
}
enum TxStatus {
  # 未处理
  unprocessed
  # 成功
  success
  # 处理中
  processing
  # 关闭
  close
}

enum TxChannel {
  # 线下
  offline
  # 会员卡
  card
  # 内部
  internal
  # 在线 / 第三方支付平台
  online
}

enum PayType {
  # 普通网页支付
  web
  # 手机网页支付
  wap
  # 移动端支付
  app
}

enum CurrencyType {
  CNY
}

enum PayMethod {
  wallet
  thirdparty
}

# 钱包状态
enum WalletStatus {
  # 没密码
  noPassword
  # 正常
  normal
  # 冻结
  freeze
}

# 钱包
type Wallet {
  # 钱包 ID 与 账户 ID 一致
  id: ID!
  status: WalletStatus
  # 余额
  amount(format: String): Float
  # 持有会员卡数量
  cardCount: Int
  # 当前积分
  point: Int
  # 累计消费
  totalConsumption: Float
  bills: [Bill]
}

type Bill implements Entity {
  id: ID!
  # 支付项目
  project: String
  # 类型  - 为支出 + 收入
  type: String
  # 描述
  title: String
  # 付款方式
  paymentMethod: String
  # 金额
  amount(format: String): Float
  # 账户结余
  balance(format: String): Float
  # 交易时间
  tradeTime(format: String): Date
  # 对应的交易
  transaction: Transaction
  # 所属账户
  account: Account
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type Transaction implements Entity {
  id: ID
  # 支付配置名称
  payConfigName: String
  # 交易项目(转账/提现等)
  project: String
  # 交易科目
  subject: String
  # 交易金额
  amount(format: String): Float
  # 交易渠道
  channel: TxChannel
  # 交易状态
  status: TxStatus
  # 备注
  notes: String
  # 转出账户
  from: Account
  # 转入账户
  to: Account
  # 关联的订单
  order: Order
  uuid: String
  creator: String
  modifier: String
  createTime(format: String): Date
  modifyTime: Date
  sn: String @deprecated
  doctorId: String @deprecated
  doctorName: String @deprecated
  patientAge: String @deprecated
  patientName: String @deprecated
  payConfigs: [PayConfig] @deprecated
}

type BillConnection implements Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Bill]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [BillWrapper]
}

type BillWrapper implements EdgeType {
  cursor: String
  node: Bill
}

input PayParams {
  # 微信内支付时，该参数有效
  openid: String
  # 微信内支付时，该参数必填 JSAPI || NATIVE
  tradeType: String
  # 钱包支付密码， 钱包支付时必填
  password: String
  backUrl: String
  showUrl: String
}

enum AccountStatus {
  # 未激活
  unactivated
  # 已锁定
  locked
  # 已激活
  activated
}

enum AccountType {
  # 个人账户
  personal
  # 医生账户
  doctor
  # 企业账户
  company
  # 药房账户
  pharmacy
  # 医院账户
  clinic
  # 平台账户
  platform
}

type AccoutOwner {
  id: ID
  # 电话
  phone: String
  # 名称
  name: String
  # 身份证
  idCard: String
  # 企业
  company: String
}

# 账户
type Account implements Entity {
  id: ID
  # 账户余额
  amount: Float!
  # 账户状态
  status: AccountStatus!
  # 账户类型
  type: AccountType
  owner: String
  # 账户对应的用户
  user: AccoutOwner
  doctor: Doctor @deprecated
  uuid: String
  creator: String
  createTime: Date
  modifier: String
  modifyTime: Date
}

type AccountConnection implements Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Account]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [AccountWrapper]
}

type AccountWrapper implements EdgeType {
  cursor: String
  node: Account
}

# 交易分页对象
type TransactionConnection implements Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Transaction]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [OrderWrapper]
}

# 重置支付密码 Token
type ResetPayPasswordToken {
  # Token
  token: String
  # 过期时间（单位秒）
  expiresIn: Int
  # Token 生成时间
  tokenCreationTime: Date
}

# 支付凭证对象
type PaymentVoucher {
  # 支付关联的订单 ID
  orderId: ID
  voucher: JSON
}

# 个人充值对账/商城对账（支付对账，退款对账）
type ReconciliationBill {
  # 订单金额
  orderAmount: Float
  # 交易金额
  transactionAmount: Float
  # 日期
  days(format: String): Date
}

extend type Query {
  accountConnection(page: Int, pageSize: Int, filters: [Filter], sort: Sort): AccountConnection
  # 钱包
  wallet(uid: ID, id: ID): Wallet
  # 账户流水
  billsConnection(
    walletId: ID!
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): BillConnection
  # 医生结算交易分页
  doctorTransactionsConnection(
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): TransactionConnection
  # 交易分页
  transactionConnection(
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): TransactionConnection
  # 支付配置
  payConfigs(payType: PayType, payMethod: PayMethod): [PayConfig]
  # 获取订单支付状态
  forceGetPayStatus(orderId: ID!): OrderPaymentStatus
  # 个人充值对账/商城对账（支付对账，退款对账）
  reconciliation(
    type: String!
    config: String
    mallType: String
    startTime: String
    endTime: String
  ): [ReconciliationBill]
}

# this schema allows the following mutation:
extend type Mutation {
  # 帐户充值 返回值为调起支付的凭证，详情请参考文档
  recharge(
    personalId: String!
    amount: Float!
    payConfigId: String!
    payType: PayType!
    payer: String
    params: PayParams
  ): PaymentVoucher
  # 发起订单支付
  topay(orderId: String!, payConfigId: String!, payType: PayType!, payer: String, params: PayParams): PaymentVoucher
  # 获取支付密码重置 Token
  resetPayPasswordToken(walletId: String!, oldPassword: String, smsCaptcha: String): ResetPayPasswordToken
  # 重置支付密码
  resetPayPassword(walletId: String!, resetPayPasswordToken: String, newPassword: String!): Void
}
# 证候、证素分页
type ClinicConnection implements Pagination, Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Clinic]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [ClinicWrapper]
}

type ClinicWrapper implements EdgeType {
  cursor: String
  node: Clinic
}

# 类型
enum ClinicType {
  # 测试
  test
  # 合作
  cooperation
  # 自营
  proprietary
  # 加盟
  join
}

# 性质
enum ClinicNature {
  # 医院
  hospital
  # 诊所
  clinic
}

# 诊所 & 医院
type Clinic implements Entity {
  id: String
  # 名称
  name: String
  # 类型
  type: ClinicType
  # 性质
  nature: ClinicNature
  # 经营范围
  businessScope: String
  # 地址
  address: Address
  # 团队
  team: Team
  # 诊所照片
  logo: Image
  # 诊所电话
  tel: String
  # 诊所联系人
  contact: String
  # 联系人电话
  contactTel: String
  # 邮箱
  email: String
  # 医院简介
  introduce: String
  # 重点科室
  keyDept(departmentType: String): [ClinicDept]
  # 标签
  tags: [String]
  # 荣誉图片
  honors: [Image]
  # 诊所的预约
  registrations: [Registration]
  # 诊所的预约--分页
  registrationsConnection(
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): ReservationOrderConnection
  # 诊所医生
  doctorsConnection(page: Int, pageSize: Int, offset: Int, limit: Int, filters: [Filter], sort: Sort): DoctorConnection
  # 重点科室
  depts: [ClinicDept]
  # 区域ID
  areaId: String
  # 地区
  area: Area
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 诊所科室类别
type ClinicDept {
  # 科室类型
  type: String
  # 科室名称
  deptName: [ClinicDeptName]
  # 科室名称
  name: String
}

# 诊所科室名称
type ClinicDeptName {
  id: ID
  name: String
}

# 诊所申请
type ClinicApply implements Entity {
  # 申请ID
  id: String
  #诊所名称
  clinicName: String
  # 地址
  address: String
  # 联系人
  linkman: String
  # 手机号
  telephone: String
  # 经营范围
  operateScope: String
  # 证书
  certificatesPath: [Image]
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 诊所申请分页
type ClinicApplyConnection implements Pagination, Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [ClinicApply]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [ClinicApplyWrapper]
}

type ClinicApplyWrapper implements EdgeType {
  cursor: String
  node: ClinicApply
}

# 按区域划分医院
type AreaHospital {
  area: String
  hospitals: [Clinic]
}

input ClinicDeptInput {
  # 科室分类
  type: String
  # 科室名称
  name: String
}

input SubmitHospitalInput {
  # 集团编码
  code: String!
  # 诊所名称
  name: String!
  # 诊所类型
  type: ClinicType!
  # 诊所性质
  nature: ClinicNature!
  # 集团管理员
  owner: TeamOwnerInput!
  # 签约人
  officer: Int
  # 经营范围
  businessScope: String
  # 地址
  address: AddressInput!
  # 诊所照片
  image: String
  # 医院简介
  introduce: String
  # 标签
  tags: [String]
  # 重点科室
  depts: [ClinicDeptInput]
  # 诊所照片
  logo: String
  # 荣誉图片
  honors: [String]
  # 诊所电话
  tel: String
  # 诊所联系人
  contact: String
  # 联系人电话
  contactTel: String
  # 邮箱
  email: String
}

input UpdateHospitalInput {
  # 诊所名称
  name: String!
  # 诊所类型
  type: ClinicType!
  # 诊所性质
  nature: ClinicNature!
  # 签约人
  officer: Int
  # 经营范围
  businessScope: String
  # 地址
  address: AddressInput!
  # 诊所照片
  image: String
  # 医院简介
  introduce: String
  # 标签
  tags: [String]
  # 重点科室
  depts: [ClinicDeptInput]
  # 诊所照片
  logo: String
  # 荣誉图片
  honors: [String]
  # 诊所电话
  tel: String
  # 诊所联系人
  contact: String
  # 联系人电话
  contactTel: String
  # 邮箱
  email: String
}

extend type Query {
  # 诊所详情
  clinic(id: ID!): Clinic
  # 诊所分页
  clinicsConnection(
    q: String
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): ClinicConnection
  # 诊所集合
  clinics(pageSize: Int, offset: Int, limit: Int, filter: String, filters: [Filter], sort: Sort): [Clinic]
  # 诊所申请分页
  clinicApplyConnection(
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): ClinicApplyConnection
  # 医院
  hospitals(q: String, offset: Int, limit: Int): [Clinic]
  # 医院分页
  hospitalConnection(
    q: String
    pageSize: Int
    offset: Int
    limit: Int
    filter: String
    filters: [Filter]
  ): ClinicConnection
  # 按区域拆分医院 @deprecated
  areaHospitals: [AreaHospital]
}

# this schema allows the following mutation:
extend type Mutation {
  # 更新医院
  updateHospital(id: ID!, entity: UpdateHospitalInput!): Clinic
  # 新增医院
  submitHospital(entity: SubmitHospitalInput!): Clinic
  # 删除医院
  removeHospital(id: String!): String!
}

extend type Subscription {
  objectUpdate: Clinic
}
# 预约分页对象
type RegistrationsConnection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Registration]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [RegistrationWrapper]
}

type RegistrationWrapper implements EdgeType {
  cursor: String
  node: Registration
}

# 预约
type Registration implements Entity {
  # id编号
  id: ID
  # 状态
  status: String
  # 类型
  type: String
  # 就诊人编号
  patientId: String
  # 就诊人年龄
  patientAge: String
  # 预约费
  regFee: Int
  # 医生编号
  doctorId: String
  # 订单编号
  orderId: String
  # 就诊人手机号
  patientPhone: String
  # 医生排班编号
  doctorTimeId: Int
  time: Date
  clinicAddress: String
  # 时间段
  periodTime: String
  # 医生姓名
  doctorName: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 医生统计
type Info {
  # 咨询总数
  consultationNum: Int
  # 预约总数
  registrationNum: Int
}

# 咨询分页对象
type ConsultingPager {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Consulting]
}

# 医生咨询
type Consulting {
  # 咨询id
  id: ID
  # 状态
  status: String
  # 疾病名称
  disease: String
  # 支付状态
  paymentStatus: String
  # 描述
  description: String
  # 退款总额
  refundAmount: Int
  # 退款时间
  refundTime: String
  # 最新回复
  newReply: String
  # 年龄
  age: Int
  # 性别
  sex: Sex
  # 就诊人姓名
  patientName: String
  # 咨询编码
  sn: String
  # 订单编号
  orderId: String
}

# 出诊统计
type Visitstat {
  # 编号
  id: ID
  # 医生编号
  doctorId: String
  # 日期
  date: String
  # 总数
  total: Int
  # 可用性
  available: Int
  # 价格
  price: Int
}

# 常用处方分页对象
type PrescriptionsConnection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Prescription]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [PrescriptionWrapper]
}

type PrescriptionWrapper implements EdgeType {
  cursor: String
  node: Prescription
}

# 常用处方
type Prescription implements Entity {
  # 编号
  id: ID
  # 名称
  name: String
  # 药类型
  medicineType: String
  doctor: Doctor
  # 持有人编号
  ownerId: String
  # 持有人类型
  ownerType: String
  # 状态
  status: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 处方价格预算
type MedicineOrderPrice {
  # 药费
  medicineAmount: Float
  # 物流费
  deliveryFee: Float
  # 优惠
  discount: Float
  # 总计
  totalAmount: Float
  # 代煎费
  decoctionFee: Float
  # 代煎物流费
  decoctionDeliveryFee: Float
  # 代煎优惠费
  decoctionDiscount: Float
  # 代煎总计
  decoctionTotalAmount: Float
  # 加工费(膏方)
  processFee: Float
  # 包装费
  packFee: Float
  # 药材价格明细
  medicines: [MedicineDetail]
}

# 病人分页对象
type DoctorPatientsConnection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [DoctorPatient]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [DoctorPatientWrapper]
}

type DoctorPatientWrapper implements EdgeType {
  cursor: String
  node: DoctorPatient
}

# 病人
type DoctorPatient implements Entity {
  # 编号
  id: ID
  # 名称
  name: String
  # 身份证号码
  idCard: String
  # 性别
  sex: Sex
  # 生日
  birthday: String
  # 手机号
  phone: String
  # 医生编号
  doctorId: String
  # 人编号
  personId: String
  # 就诊人编号
  patientId: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 病人
type DoctorAddress implements Entity {
  # 编号
  id: ID
  # 名称
  name: String
  # 地区
  area: String
  # 明细
  details: String
  # 持有人类型
  ownerType: String
  # 持有人编号
  ownerId: String
  default: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 加号秘钥对象
type Secret {
  doctorId: String
  datetime: String
  regFee: String
  key: String
}

# 银行卡对象
type BankCard {
  creator: String
  modifier: String
  id: ID
  sn: String
  area: Area
  depositBank: String
  owner: String
  bank: String
  memberId: Int
  createTime: String
  modifyTime: String
}

# 证书对象
type Certificate {
  path: String
  name: String
  ext: String
  # 内容类型
  contentType: String
  description: String
  size: String
  key: String
}

# 医生分页对象
type DoctorConnection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Doctor]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [DoctorWrapper]
}

type DoctorWrapper {
  cursor: String
  node: Doctor
}

# 医生
type Doctor implements Entity {
  # 编号
  id: ID
  # 名称
  name: String
  # 身份证号
  idCard: String
  # 银行账户
  bankAccount: String
  # 开户行
  depositBank: String
  # 职称代码
  position: String
  # 职称名称
  positionDesc: String
  # 荣誉称号编码
  honorary: String
  # 荣誉称号
  honoraryDesc: String
  # 第一执业点
  firstWorkPoint: String
  # 科室编码
  department: String
  # 科室
  departmentDesc: String
  # 性别
  sex: Sex
  # 简介
  introduction: String
  # 擅长
  expertField: String
  # 详细介绍
  detailedIntroduction: String
  # 头像
  head: Certificate
  # 预约费
  regFee: Int
  # 咨询费
  consultingFee: Int
  # 成员编号
  member: Member
  # 是否开启
  enabled: Int
  # 地址
  address: String
  # 医生手机号
  phone: String
  # 医生等级
  hospitLevel: String
  # 类别
  sort: String
  # 讲座主题
  lectureTopic: String
  # 是否开启讲座
  openLecture: Int
  # 签约人
  conPerson: String
  # 医院名称
  hospitalName: String
  # 证书
  certificatesPath: [Certificate]
  # 业务范围
  scope: String
  # 诊所名称
  clinic: Clinic
  clinicId: String
  # 医生工作区域代码
  areaCodeDesc: String
  # 空余时间
  freeTime: String
  # 预约总数
  regSum: Int
  # 咨询总数
  consultSum: Int
  # 区域ID
  areaId: String
  # 区域
  area: Area
  # 账户
  account: Account
  # 银行卡
  bankcard: BankCard
  # 预约
  registrations: RegistrationsConnection
  # 处方
  prescriptions: PrescriptionsConnection
  # 病人
  patients: DoctorPatientsConnection
  # 信息
  info: Info
  # 咨询
  consultings: DoctorConnection
  # 出诊信息
  visitstat: [Visitstat]
  # 加号秘钥信息
  secret: Secret
  # 地址信息
  addresses: [DoctorAddress]
  # 排班信息
  schedules(format: ScheduleFormat): [Schedule]
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 排班格式化
enum ScheduleFormat {
  # 按天
  day
}

# 排班信息
type Schedule implements Entity {
  id: ID
  # 医生ID
  doctorId: ID
  # 计划ID
  planId: ID
  # 排班日期
  date: String
  # 开始时间
  startTime: String
  # 时间段
  period: String
  # 时间段列表
  visitTimes: [VisitTime]
  price: Float
  locked: Boolean
  expired: Boolean
  bucket: Bucket
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 预约时间
type VisitTime {
  id: ID
  period: String
}

#排班详情
type Bucket implements Entity {
  # 排班ID
  id: ID
  # 就诊省市区
  area: Area
  # 就诊详细地址
  address: String
  # 排班状态
  status: String
  # 预约费用
  amount: Float
  # 时段编号
  code: String
  # 日期
  day: String
  # 开始时间点
  start: String
  # 结束时间点
  end: String
  # 时段
  value: String
  # 已预约数量
  subscribeNum: Int
  # 已锁定数量
  lockedNum: Int
  # 是否预约满
  fully: Boolean
  # 是否分割时段
  split: Boolean
  # 排班总数
  quota: Int
  doctor: Doctor
  # 可见度
  visibility: String
  # 所有者
  owner: String
  # 所有者类型
  ownerType: String
  # 所有者ID
  ownerId: String
  scheduleId: Schedule
  version: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

#挂号
type Rorder implements Entity {
  #ID
  id: ID
  #类型
  type: String
  sn: String
  alter: Boolean
  #挂号状态
  status: RegistrationStatus
  #付款状态
  paymentStatus: PaymentStatus
  #总次数
  totalAmount: Int
  #拒绝次数
  refundAmount: Int
  doctorTimeId: Int
  #会诊日期
  time: Date
  #会诊时间
  periodTime: String
  #会诊地址
  address: String
  #医生信息
  doctor: Doctor
  #医生名称
  doctorName: String
  #诊所ID
  clinicId: String
  #员工ID
  memberId: Int
  #病人ID
  patientId: String
  #病人名称
  patientName: String
  #病人年龄
  patientAge: Int
  #病人生日
  patientBirthday: Date
  patientPersonId: ID
  #病人手机号
  patientPhone: String
  #病人性别
  patientSex: String
  #病人身份证
  patientIdCard: String
  #是否处方
  presciptionFlag: Boolean
  delFlag: String
  isComment: Boolean
  #付款时间
  paymentTime: Date
  #订单id
  orderId: String
  minutes: Date
  #信息
  body: String
  abnormal: Boolean
  fullStatus: Int
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

enum PaymentStatus {
  unpaid
  partPayment
  refunding
  paid
  partRefund
  refunded
}

enum RegistrationStatus {
  untreated
  processing
  completed
  cancelled
  confirmed
  expired
}

extend type Query {
  # 医生列表
  doctors(
    name: String
    q: String
    department: String
    clinicId: ID
    honorary: String
    scope: [String]
    limit: Int
  ): [Doctor]
  # 医生分页查询
  doctorsConnection(
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
    q: String
  ): DoctorConnection
  # 医生详情
  doctor(id: String!): Doctor
  # TODO废弃--20170717
  registrationsConnection(offset: Int, limit: Int, filter: String): RegistrationsConnection @deprecated
  registration(id: String!): Registration
  registrations(offset: Int, limit: Int): [Registration]
  rorders(page: Int, offset: Int, limit: Int, filters: [Filter], sort: Sort): [Rorder]
  prescriptionsConnection(offset: Int, limit: Int, filter: String): [Prescription]
  prescription(id: String!): Prescription
  doctorPatient(id: String!): DoctorPatient
  schedules(doctorId: ID!): JSON
  # 处方价格预算
  medicineOrderPrice(prescriptionId: ID, areaId: ID): MedicineOrderPrice
}

extend type Mutation {
  # 删除医生
  removeDoctor(id: ID!): Void
  # 医生启用停用
  enabledDoctor(doctorId: ID!, enabled: Boolean!): Doctor
}
# 预约订单
type ReservationOrder implements Entity {
  # 订单id
  id: String
  # 状态
  status: String
  #类型
  type: String
  #单号
  sn: String
  #支付状态
  paymentStatus: String
  #订单总额
  totalAmount: Float
  # 医生
  doctor: Doctor
  # 退款金额
  refundAmount: Float
  # 退款原因
  refundReason: String
  # 医生排班id
  doctorTimeId: ID
  # 就诊时间
  time: String
  # 就诊时段
  periodTime: String
  # 就诊地址
  address: String
  # 医生姓名
  doctorName: String
  # 诊所
  clinicId: ID
  # 会员
  memberId: ID
  # 就诊人
  patientId: ID
  # 就诊人姓名
  patientName: String
  # 就诊人年龄
  patientAge: String
  # 就诊人生日
  patientBirthday: String
  # 就诊人person
  patientPersonId: ID
  # 就诊人手机号
  patientPhone: String
  # 就诊人性别
  patientSex: String
  # 就诊人身份证
  patientIdCard: String
  # 是否有处方标识
  presciptionFlag: Boolean
  # 删除标志
  delFlag: String
  # 是否进行过评论,当为true时,可以评论
  isComment: Boolean
  # 支付时间
  paymentTime(format: String): Date
  # 交易订单ID
  orderId: String
  order: Order
  # 完整状态:1.未支付 2.已支付 3.就诊中 4.已完成 5.已退款 6.部分退款 7.已过期 8.已取消 9.退款中
  fullStatus: Int
  minutes: String
  body: String
  originalTime(format: String): Date
  originalPeriodTime: String
  abnormal: Boolean
  # 评价
  evaluate: Evaluate
  # app订单状态【1：未支付， 2：已支付， 3：就诊中， 4：已完成， 5：已退款， 6：部分退款， 7：已过期， 8：已取消， 9：退款中, 101:待评价】
  appOrderStatus: String
  # 挂号单
  patientRegistrationOrder: PatientRegistrationOrder
  uuid: String
  creator: String
  modifier: String
  createTime(format: String): Date
  modifyTime(format: String): Date
}

# 挂号单
type PatientRegistrationOrder implements Entity {
  businessId: ID
  id: ID
  # 状态
  status: PatientRegistrationStatus
  # 挂号类型
  type: Type
  # 就诊人ID
  patientId: String
  # 就诊人姓名
  patientName: String
  # 就诊人身份证
  patientIdCard: String
  # 性别
  patientSex: Sex
  # 出生年月
  patientBirthday: Date
  # 年龄
  patientAge: Int
  # 就诊人联系电话
  patientPhone: String
  # 就诊人关联的健康档案ID
  patientPersonId: ID
  # 预约时段ID
  doctorTimeId: ID
  # 预约时段
  periodTime: String
  # 预约时段
  periodId: ID
  # 预约时间
  time: Date
  # 就诊地址
  clinicAddress: String
  # 医生ID
  doctorId: ID
  # 医生名称
  doctorName: String
  # 诊所ID
  clinicId: ID
  # 病历
  medicalRecords: MedicalRecords
  # 网站的挂号订单ID
  order: ReservationOrder
  # 是否有处方标识
  presciptionFlag: Boolean
  # 挂号费
  regFee: Float
  # 是否创建过配药订单标识
  medicineOrderFlag: Boolean
  # 会员id
  memberId: ID
  resultCode: String
  # 原挂号单ID
  original: PatientRegistrationOrder
  orderId: ID
  # 是否可查档案
  authorize: Boolean
  # 药单
  morder: Morder
  # 处方
  prescription: PrescriptionDetail
  uuid: String
  creator: String
  modifier: String
  createTime(format: String): Date
  modifyTime(format: String): Date
}

enum PatientRegistrationStatus {
  # 未处理
  untreated
  # 处理中
  processing
  # 已完成
  completed
  # 已取消
  cancelled
}

enum Type {
  # 普通
  normal
  # 加号
  plus
  # 快诊
  quick
  # 申请
  apply
}

# 病历表
type MedicalRecords implements Entity {
  id: ID
  # 病情诊断描述
  diseaseIntroduce: String
  # 证型
  clinicalType: String
  # 诊断
  diagnose: String
  # 就诊人ID
  patientId: ID
  # 就诊人
  patientName: String
  # 就诊人年龄
  patientAge: Int
  # 出生年月
  patientBirthday: Date
  # 联系电话
  patientPhone: String
  # 性别
  patientSex: Sex
  # 身份证
  patientIdCard: String
  # 医生
  doctor: Doctor
  # 挂号单ID
  patientRegistrationId: ID
  # 会员id
  memberId: ID
  # 删除标识
  delFlag: String
  # 处方
  prescription: PrescriptionDetail
  uuid: String
  creator: String
  modifier: String
  createTime(format: String): Date
  modifyTime(format: String): Date
}

type Patient implements Entity {
  id: String
  name: String
  age: Int
  sex: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 预约订单分页
type ReservationOrderConnection implements Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [ReservationOrder]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [ReservationOrderWrapper]
}

type ReservationOrderWrapper implements EdgeType {
  cursor: String
  node: ReservationOrder
}

# 评价
type Evaluate {
  id: ID
  # 评价内容
  content: String
  # 评分
  star: Int
  show: Boolean
  # 评价对象   appointment 预约评价
  targetType: String
  # 评价对象ID
  targetId: ID
  # 医生ID
  doctorId: ID
  # 医生姓名
  doctorName: String
  # 会员ID
  memberId: ID
  # 患者ID
  patientId: ID
  # 患者姓名
  patientName: String
  # 档案ID
  personId: ID
  # 评论回复
  replyEvaluates: [Evaluate]
}

# 加号类型
enum RapidReservationType {
  # 客户端加号
  apply_subscribes
  # 二维码加号
  qr_subscribes
}

type ConsultConnection implements Connection {
  count: Int
  perPage: Int
  total: Int
  page: Int
  items: [ConsultOrder]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [ConsultOrderWrapper]
}

# 医生咨询
type ConsultOrder implements Entity {
  # 咨询id
  id: String
  # 状态【untreated未处理, completed已完成, cancelled已取消】
  status: String
  # 疾病名称
  disease: String
  # 支付状态【unpaid未支付, refunding部分支付, paid已支付, partRefund部分退款, refunded全额退款】
  paymentStatus: String
  # 描述
  description: String
  # 退款总额
  refundAmount: Float
  # 退款时间
  refundTime: String
  # 最新回复
  newReply: ConsultingContent
  # 年龄
  age: Int
  # 性别
  sex: Sex
  # 就诊人姓名
  patientName: String
  # 咨询编码
  sn: String
  # 交易单号
  orderId: String
  # 医生
  doctor: Doctor
  # 咨询内容
  consultingAnswers: [ConsultingContent]
  # 订单总额
  totalAmount: Float
  # 提问总数
  questionNumber: Int
  # 回复总数
  replyNum: Int
  # 是否有新的咨询
  newFlag: Boolean
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 咨询内容
type ConsultingContent implements Entity {
  id: String
  # 类型【1、member：用户提问， 2、doctor：医生回复】
  type: String
  member: Member
  # 内容
  content: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type ConsultOrderWrapper implements EdgeType {
  cursor: String
  node: ConsultOrder
}

type MorderConnection implements Pagination, Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Morder]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [MorderWrapper]
}

type MorderWrapper implements EdgeType {
  cursor: String
  node: Morder
}

enum MStatus {
  dispensing
  completed
  untreated
  shipping
  unpaid
  untreated
  refunded
  closed
  dispensing
}

enum MorderNewStatus {
  # 未支付
  unpaid
  # 未处理
  untreated
  # 配药中
  shipping
  # 已退款
  refunded
  # 已关闭
  closed
}

enum MedicineType {
  decoctionPieces
  thickPaste
  granules
}

# 药单
type Morder implements Entity {
  # 编号
  id: String
  # 药品类型
  medicineType: MedicineType
  # 订单编号
  orderId: String
  # 订单编码
  orderSn: String
  # 新状态（代替老的状态）
  newstatus: MorderNewStatus
  status: MStatus
  # 支付状态
  paymentStatus: String
  # 支付时间
  paymentTime: String
  # 物流状态
  shippingStatus: String
  # 医生姓名
  doctorName: String
  # 药品总额
  medicineAmount: Float
  # 总金额
  totalAmount: Float
  medicineOrderItems: String
  # 会员编号
  memberId: Int
  deliveryFlag: String
  # 收货人姓名
  shipName: String
  # 收货地区
  shipArea: Area
  # 收货地址
  shipAddressString: String
  # 收货人号码
  shipPhone: String
  # 收货手机号
  shipMobile: String
  # 预约单编号
  patientRegistrationId: String
  # 物流费
  deliveryFee: Float
  # 优惠费
  deliveryAmount: Float
  decoctionFlag: String
  # 代煎收费
  decoctionFee: Float
  # 加工费
  processFee: Float
  # 包装费
  packFee: Float
  # 药单类型
  type: String
  # 地区码
  areaCodeDesc: String
  body: String
  # 处方
  medicineOrderItem: PrescriptionDetail
  # 药房对象
  medicineShop: MedicineShop
  # 诊所名称
  clinicName: String
  prescription: Prescription
  # 编码
  sn: String
  # 数值
  num: Int
  # 医生编号
  doctorId: String
  # 就诊人编号
  patientId: String
  patientName: String
  patientSex: String
  patientAge: Int
  fullStatus: Int
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type MedicineShop implements Entity {
  id: String
  code: String
  name: String
  area: Area
  address: String
  type: String
  phone: String
  contact: String
  memberId: Int
  overlayArea: String
  decoction_fee: Int
  teamId: String
  handler: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

enum DecoctionFlag {
  # 代煎
  Y
  # 否
  N
}

input SubmitMorderInput {
  # 是否代煎   Y/N
  decoctionFlag: DecoctionFlag
  # 地址ID
  addressId: ID
  # 处方ID
  prescriptionId: ID
}

# 用户分页对象
type AorderConnection implements Pagination, Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Aorder]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [AorderWrapper]
}

type AorderWrapper implements EdgeType {
  cursor: String
  node: Aorder
}

type Aorder implements Entity {
  id: String
  sn: String
  status: String
  paymentStatus: String
  totalAmount: Int
  refundAmount: Int
  time: String
  day: String
  applyTime: String
  applyDay: String
  address: String
  doctor: Doctor
  scope: Int
  linicName: String
  clinicId: String
  regSum: Int
  areaCodeDesc: String
  consultSum: Int
  area: Area
  doctorName: String
  memberId: Int
  patientId: String
  patientName: String
  patientAge: Int
  patientBirthday: String
  patientPersonId: ID
  patientPhone: String
  patientSex: String
  patientIdCard: String
  delFlag: String
  orderId: String
  fullStatus: Int
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

input SubmitAorderInput {
  memberId: Int!
  patientId: String!
  doctorId: String!
  day: String!
  time: String!
}

input UpAorderInput {
  memberId: Int!
  id: String
}

input CheckAorderInput {
  apply_id: String
  time: String
  day: String
  address: String
  c: String
}

input reservationOrderInput {
  #会员ID
  memberId: ID!
  # 排班ID
  visittimeId: ID!
  # 就诊人ID
  patientId: ID!
  # 是否允许查看患者档案
  authorize: Boolean
}

input SubmitRapidReservationOrder {
  # 加号类型  客户端加号 apply_subscribes
  key: String
  # 患者
  patientId: ID
  # 加号日期 YYYY-MM-DD
  time: String
  # 加号时段  客户端加号  HH:MM-HH:MM  二维码 传datetime值
  periodTime: String
  # 是否允许查看患者档案
  authorize: Boolean
}

# this schema allows the following mutation:
extend type Mutation {
  submitAorder(entity: SubmitAorderInput!): Aorder
  cancelAorder(entity: UpAorderInput!): String
  checkAorder(entity: CheckAorderInput!): Aorder
  sendMorder: Int
  # 添加药单
  submitMorder(personalId: ID!, entity: SubmitMorderInput!): Morder
}

extend type Query {
  memberAordersConnection(memberId: Int!, page: Int, offset: Int, limit: Int, filter: String): AorderConnection
  doctorAordersConnection(memberId: Int!, page: Int, offset: Int, limit: Int, filter: String): AorderConnection
  aorderMember(memberId: Int, id: String!): Aorder
  aorderDoctor(doctorId: String, id: String!): Aorder
  memberAorders(memberId: Int!, offset: Int, limit: Int): [Aorder]
  doctorAorders(memberId: Int!, offset: Int, limit: Int): [Aorder]
  aorders(offset: Int, limit: Int, filter: String): [Aorder]
  aorder(id: String!): Aorder
  morders(
    orderId: String
    doctorName: String
    clinicName: String
    status: String
    medicineType: String
    offset: Int
    limit: Int
  ): [Morder]
  mordersConnection(page: Int, offset: Int, limit: Int, filters: [Filter], sort: Sort): MorderConnection
  morder(id: String!): Morder
  consultOrderConnection(page: Int, offset: Int, limit: Int, filters: [Filter], sort: Sort): ConsultConnection
  # 原始挂号单(未处理)
  reservationOrderConnection(
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): ReservationOrderConnection
  # 挂号单(优先展示待就诊)
  reservationOrderConnectionByOrderUntreated(
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): ReservationOrderConnection
  reservationOrder(uid: ID!, id: ID!): ReservationOrder
  # 添加挂号订单
  submitReservationOrder(entity: reservationOrderInput!): ReservationOrder
  # 加号订单
  submitRapidReservationOrder(doctorId: ID!, entity: SubmitRapidReservationOrder!): ReservationOrder
  # 预约评价
  submitReservationOrderEvaluate(personalId: ID!, rorderId: ID!, star: Int!, content: String): Evaluate
}

extend type Subscription {
  objectUpdate: Aorder
}
type LoginUser {
  id: ID
  # 会员类型
  type: String
  # 用户名
  username: String
  # 昵称
  nickName: String
  # 上次登录时间
  lastLoginTime: String
  # 会员信息
  profile: LoginProfile
  # 角色
  roles: [String]
  # Token
  token(clientId: String!): Token
  # 会员信息
  personal: Personal
}

# 登录对象 医生／个人
type LoginProfile {
  id: ID
  # 姓名
  name: String
  # 性别
  sex: Sex
  # 生日
  birthday: Date
  # 移动电话
  mobile: String
  # 固定电话
  tel: String
  # E-mail
  email: String
  # 描述信息
  description: String
}

enum TokenType {
  bearer
  mac
}

type Token {
  # 访问 Token
  accessToken: String
  # Token 类型
  tokenType: TokenType
  # 有效时间 单位秒
  expiresIn: Int
  # 刷新 Token
  refreshToken: String
  # 刷新 Token 的有效时间 单位秒
  reExpiresIn: Int
  # Token 生成时间
  tokenCreationTime: Date
}

type SignupToken {
  token: String
  expiresIn: Int
  tokenCreationTime: Date
}

type LoginToken {
  token: String
  expiresIn: Int
  tokenCreationTime: Date
  login(userType: UserType, scope: LoginScope): LoginUser
}

type ResetPasswordToken {
  token: String
  expiresIn: Int
  tokenCreationTime: Date
  resetPassword(newPassword: String): Void
}

type ResetPhoneToken {
  token: String
  expiresIn: Int
  tokenCreationTime: Date
}

extend type Query {
  # 获取当前用户
  me: LoginUser
}

# 登录范围, 可选值为 member 与 user 。 默认为 member
enum LoginScope {
  # 个人 及 医生 端登录
  member
  # 管理端登录
  user
}

enum UserType {
  # 个人
  personal
  # 医生
  doctor
}

enum CaptchaSource {
  # 登录
  login
  # 找回密码
  resetPassword
  # 注册
  signup
  # 变更手机号码 - oldPhone
  resetPhoneOldPhone
  # 变更手机号码 - newPhone
  resetPhoneNewPhone
  # 重置支付密码
  resetPayPassword
}

input TokenInput {
  clientId: String!
  grantType: String!
  username: String!
  password: String!
  scope: String!
}

extend type Mutation {
  # 发送验证码
  sendCaptcha(phone: String!, source: CaptchaSource!): String
  # 登陆 Token
  loginToken(username: String!, smsCaptcha: String!): LoginToken
  # 登录 scope 默认为 member userType 默认为 personal
  login(username: String, password: String, smsCaptcha: String, userType: UserType, scope: LoginScope): LoginUser
  # 获取重置密码 Token
  resetPasswordToken(uid: ID, username: String, smsCaptcha: String, oldPassword: String): ResetPasswordToken
  # 重置密码
  resetPassword(resetPasswordToken: String!, newPassword: String!): Void
  # 生成注册 Token
  signupToken(username: String!, smsCaptcha: String!): SignupToken
  # 注册接口
  signup(signupToken: String!, password: String): LoginUser
  # 重置手机号码
  resetPhoneToken(oldPhone: String!, smsCaptcha: String): ResetPhoneToken
  # 更换手机号码
  resetPhone(newPhone: String!, smsCaptcha: String, resetPhoneToken: String!): Void
  # logout
  logout: Void
  # 刷新 Token
  refreshToken(clientId: String!, refreshToken: String!): Token
}

extend type Subscription {
  objectUpdate: LoginUser
}
#  收藏分页对象
type PersonalFavoriteConnection implements Connection {
  totalCount: Int
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [PersonalFavorite]
  pageInfo: PageInfo!
  edges: [PersonalFavoriteWrapper]
}

#  收藏
type PersonalFavorite implements Entity {
  id: ID
  personal: Personal
  type: String
  targetType: String
  targetId: String
  title: String
  article: Article
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type PersonalFavoriteWrapper implements EdgeType {
  cursor: String
  node: PersonalFavorite
}

extend type Query {
  # 文章是否已收藏
  checkArticleFavorite(aid: ID!, uid: ID!): Boolean
  # 我的文章收藏列表
  articleFavorites(uid: ID!, limit: Int, sort: Sort, filters: [Filter]): [PersonalFavorite]
}

# 删除收藏
input RemoveFavoriteInput {
  # 会员ID
  uid: ID!
  # 文章ID
  aid: ID!
}

# this schema allows the following mutation:
extend type Mutation {
  # 收藏文章, personalId会员ID， targetId文章ID， title文章标题
  submitArticleFavorite(personalId: ID!, targetId: ID!, title: String!): PersonalFavorite
  # 取消收藏文章，id收藏的ID
  removeArticleFavorite(id: ID, rm: RemoveFavoriteInput): Void
}

extend type Subscription {
  objectUpdate: PersonalFavorite
}
#  意见反馈分页对象
type MemberFeedbackConnection implements Connection {
  totalCount: Int
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [MemberFeedback]
  pageInfo: PageInfo!
  edges: [MemberFeedbackWrapper]
}

#  意见反馈
type MemberFeedback implements Entity {
  id: ID
  # 反馈内容
  content: String
  # 手机号
  phone: String
  # 反馈类型【产品，服务，支付，其他】
  type: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type MemberFeedbackWrapper implements EdgeType {
  cursor: String
  node: MemberFeedback
}

extend type Query {
  # 反馈详情
  memberFeedback(id: ID!): MemberFeedback
  # 反馈列表
  memberFeedbackConnection(
    page: Int
    pageSize: Int
    limit: Int
    type: String
    sort: Sort
    filters: [Filter]
  ): MemberFeedbackConnection
}

# this schema allows the following mutation:
extend type Mutation {
  # 新增反馈, content反馈内容, phone手机号
  submitMemberFeedback(content: String!, phone: String!, type: String!): MemberFeedback
}
# 用户分页对象
type MemberPatientPager {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [MemberPatient]
}

# 病人
type MemberPatient {
  id: ID
  # 姓名
  name: String
  # 昵称
  nickname: String
  # 身份证
  idcard: String
  # 性别
  sex: String
  # 生日
  birthday: String
  # 手机号
  phone(format: Boolean): String
  memberId: ID
  doctorId: ID
  personId: ID
  person: Person
  # 是否默认
  default: Boolean
  # 家庭关系
  appellation: String
  # 出生时间
  birthtime: String
  # 用户头像
  avatar: Image
  # 年龄
  age: Int
  # 慢性病
  chronic: String
  # 订单
  orders: [Order]
  # 档案
  document(code: [String]): [Document]
  # 儿童档案
  childRecords(page: Int, limit: Int): RecordConnection
}

type PersonalIcon {
  id: ID
  name: String
}

# 家庭成员
type FamilyMember {
  id: ID
}

type Personal {
  id: ID
  # 姓名
  name: String
  # 性别
  sex: Sex
  # 手机号
  mobile(format: Boolean): String
  # 邮箱
  email: String
  # 等级名称
  levelName: String
  # 会员等级
  level: PersonalLevel
  # 会员下一等级
  nextLevel: PersonalLevel
  # 昨日新增积分
  yesterdayAddPoint: Int
  # 用户角标
  icons: [PersonalIcon]
  # 钱包
  wallet: Wallet
  # 积分
  point: Int
  # 头像
  avatar: Image
  # 是否启用
  enabled: Boolean
  # 圈子
  circles: [Circle]
  # 集团
  teams: [Team]
  # 家人
  families: [FamilyMember]
  # 本人
  patient: MemberPatient @deprecated
  # 就诊人对象
  patients: [MemberPatient] @deprecated
  # 评价信息对象
  comments: [Comment]
  # 个人发票对象
  # memberInvoices:[MemberInvoice]
  # 订单对象
  orders: [Order]
  iorders: [Iorder]
  morders: [Morder]
  # 用户处方对象
  memberPrescriptions: [MemPrescription]
  # 收货人地址
  receivers: [PersonalReceiver]
  # 健康信息对象
  healthInformation: HealthInformation
  # 最新消息通知
  message: UserMessage
  # 消息通知
  messages(page: Int, limit: Int, type: String): [UserMessage]
  messageTypes: [UserMessageType]
  # 订单分页
  ordersConnection(
    appStatus: AppStatus
    page: Int
    pageSize: Int
    limit: Int
    type: String
    sort: Sort
    filters: [Filter]
  ): OrderConnection
  # 推送开关【false关，true开】
  switcha: Boolean
}

type PersonalConnection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Personal]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [PersonalWrapper]
}

type PersonalWrapper {
  cursor: String
  node: Personal
}

# 会员等级
type PersonalLevel {
  # 等级
  level: Int
  # 等级名称
  name: String
  # 经验
  point: Int
}

# 用户已开票订单对象
type IorderPager {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Iorder]
}

# 用户已开票订单
type Iorder implements Entity {
  id: Int
  orderSn: String
  orderType: String
  realAmount: Int
  invoiceAmount: Int
  targetType: String
  targetId: String
  memberId: Int
  delFlag: String
  doctorPositionDesc: String
  paymentTime: String
  sex: String
  description: String
  fullStatus: Int
  questionNumber: Int
  consultingLimit: Int
  totalAmount: Int
  patientName: String
  newFlag: String
  refundAmount: Int
  replyNum: Int
  payment: String
  doctorName: String
  orderId: String
  age: Int
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 会员标记对象
type MemberTagPager {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [MemberTag]
}

# 会员标记
type MemberTag {
  id: Int
  name: String
}

# 会员收货地址
type PersonalReceiver {
  id: ID
  # 收货人姓名
  name: String
  # 地区
  area: Area
  # 详细地址
  address: String
  # 手机号
  mobile: String
  # 是否默认
  default: Boolean
  # 邮政编码
  zipCode: String
  # 会员
  member: Personal
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 用户处方对象
type MemPrescriptionPager {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [MemPrescription]
}

# 用户已开票订单
type MemPrescription implements Entity {
  id: String
  status: String
  statusNotes: String
  patientRegistrationId: String
  doctor: String
  memberId: Int
  patientName: String
  medicineType: String
  num: Int
  items: String
  notes: String
  resultCode: Int
  doctorAdvice: String
  medicines: String
  patientSex: String
  patientAge: Int
  fullStatus: Int
  expires: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 医生短信对象
type UserMessageConnection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [UserMessage]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [UserMessageWrapper]
}

type UserMessageWrapper {
  cursor: String
  node: UserMessage
}

type RegistrationOrder implements Entity {
  # 会诊医生
  doctorName: String
  # 会诊日期
  time: String
  # 会诊时间
  periodTime: String
  # 用于记录退款原因  1.医生或管理员发起退号 2.用户发起
  refundReason: Int
  # 会诊地址
  address: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type PatientRegistration implements Entity {
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type HealthIntervenePaper implements Entity {
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

type Notify {
  code: String
  name: String
  notifyType: String
  # code为reservation_suce，plus_review_suce，plus_review_fail，reservation_remind，plus_review的实体
  registrationOrder: RegistrationOrder
  # code为pay_remind的实体
  patientRegistration: PatientRegistration
  # code为report_remind，health_monitor_exc，health_intervene_record，health_intervene_record的实体
  record: Record
  # code为health_intervene_paper的实体
  paper: HealthIntervenePaper
}

# 医生短信
type UserMessage {
  # 编号
  id: Int
  # 内容
  content: String
  # 目标
  target: String
  # 目标类型
  targetType: String
  # 通知
  notify: Notify
  # 标题
  title: String
  # 档案
  document: Record
  # 记录
  record: Record
  # 预约
  registration: Registration
  # 短信类型
  messageType: UserMessageType
  # 模板参数
  templateVariables: UserMessageTemplateVariables
  createTime(format: String): Date
}

type UserMessageTemplateVariables {
  msg: String
  title: String
  bmi: String
}

# 会员等级对象
type MemberLevelPager {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [MemberLevel]
}

# 会员等级
type MemberLevel {
  creator: String
  modifier: String
  id: Int
  name: String
  exp: Int
  description: String
  createTime: Date
  modifyTime: Date
}

# 用户分页对象
type MemberConnection implements Pagination, Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Member]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [MemberWrapper]
}

type MemberWrapper implements EdgeType {
  cursor: String
  node: Member
}

type MemberType {
  id: String!
  name: String
}

# 用户
type Member implements Entity {
  # 编号
  id: Int!
  # 类型
  type: String
  # 用户名
  username: String
  # 昵称
  nickName: String
  # 锁定时间
  lockTime: String
  # 最后登录时间
  lastLoginTime: String
  # 用户类型
  types: [MemberType]
  # 证件是否失效
  credentialsNonExpired: Boolean
  # 账户是否失效
  accountNonExpired: Boolean
  # 账户是否锁定
  accountNonLocked: Boolean
  # 目标
  target: String
  # 编码
  code: String
  # 集团
  teams: [Team]
  # 就诊人对象
  patients: [MemberPatient]
  # 评价信息对象
  comments: [Comment]
  # 个人发票对象
  # memberInvoices:[MemberInvoice]
  # 订单对象
  orders: [Order]
  iorders: [Iorder]
  morders: [Morder]
  # 本人
  patient: MemberPatient
  # 用户处方对象
  memberPrescriptions: [MemPrescription]
  # 钱包对象
  wallet: Wallet
  # 健康信息对象
  healthInformation: HealthInformation
  # 消息通知
  messages(page: Int, limit: Int, type: String): [UserMessage]
  messageTypes: [UserMessageType]
  # 订单分页
  ordersConnection(page: Int, pageSize: Int, limit: Int, type: String, sort: Sort, filters: [Filter]): OrderConnection
  uuid: String
  creator: String
  modifier: String
  createTime(format: String): Date
  modifyTime: Date
}

# 消息类型
type UserMessageType {
  memberId: Int
  userId: Int
  # 消息类型编号
  id: String
  # 消息标题
  title: String
  # 消息第一条记录
  first: UserMessage
}

enum InputMemberType {
  id
  phone
}

extend type Query {
  member(id: ID, type: InputMemberType): Member
  members(offset: Int, limit: Int): [Member]
  # 会员信息
  personal(id: ID, type: InputMemberType): Personal
  # 会员列表
  personals(limit: Int, filters: [Filter], sort: Sort): [Personal]
  personalConnection(
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): PersonalConnection
  # 会员等级列表
  memberLevels(limit: Int, filters: [Filter]): [MemberLevel]
  patient(memberId: ID, personId: ID): MemberPatient
  membersConnection(page: Int, offset: Int, limit: Int, filters: [Filter], sort: Sort): MemberConnection
}

input TypeInput {
  id: String
  name: String
}

input UpdateMemberInput {
  id: Int!
  name: String!
}

input upMemberMessageInput {
  nid: String
  mid: ID
}

# 发票修改
#input upMemberInvoiceInput{
#    id:ID!
#    logistics:String
#    ship_no:String
#    status:InvoiceStatus
#}
# 病人实体
input upMemberPatientInput {
  id: ID
  # 关系
  appellation: String
  # 姓名
  name: String
  # 昵称
  nickname: String
  # 身份证
  idcard: String
  # 性别
  sex: String
  # 年龄
  age: Int
  # 生日
  birthday: String
  # 慢性病
  chronic: String
  # 手机号
  phone: String
  # 职业
  occupation: String
  # 出生时间
  birthtime: String
  # 用户头像
  avatar: String
  # 是否默认用户
  default: Boolean
}

input remoteMemberPatientInput {
  # 家属ID
  id: ID
}

# 个人资料
input upMemberProfileInput {
  name: String
  sex: Sex
  birthday: String
  mobile: String
  tel: String
  email: String
  website: String
  description: String
  level: Int
  avatar: String
}

# 修改会员地址
input UpdatePersonalReceiverInput {
  # 收货人姓名
  name: String
  # 地区
  area: String
  # 详细地址
  address: String
  # 手机号
  mobile: String
  # 是否默认
  default: Boolean
  # 邮政编码
  zipCode: String
}

# 新增会员地址
input SubmitPersonalReceiverInput {
  # 会员id
  uid: ID!
  # 收货人姓名
  name: String!
  # 地区
  area: String!
  # 详细地址
  address: String!
  # 手机号
  mobile: String!
  # 是否默认
  default: Boolean
  # 邮政编码
  zipCode: String
}

# this schema allows the following mutation:
extend type Mutation {
  upMember(id: Int!): Member
  removeMember(id: Int!): Int!
  submitMember(entity: JSON!): Member
  upMemberMessage(entity: upMemberMessageInput!): UserMessage
  #upMemberInvoice(entity: upMemberInvoiceInput!): MemberInvoice
  # 家属修改
  upPatient(id: ID!, entity: upMemberPatientInput!): MemberPatient
  submitPatient(id: ID!, entity: upMemberPatientInput!): MemberPatient
  removePatient(id: ID!, entity: remoteMemberPatientInput!): MemberPatient
  # 新增收货地址
  submitReceiver(entity: SubmitPersonalReceiverInput!): PersonalReceiver
  # 删除收货地址
  removeReceiver(id: ID): Void
  # 修改收货地址
  updateReceiver(id: ID!, entity: UpdatePersonalReceiverInput!): PersonalReceiver
  # 设置默认地址
  updateDefaultReceiver(id: ID!, isdefault: Boolean): PersonalReceiver
  # 修改推送开关
  updatePersonalSwitcha(uid: ID!, switcha: Boolean!): Void
}
# 用户分页对象
type MessageConnection implements Pagination, Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Message]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [MessageWrapper]
}

type MessageWrapper implements EdgeType {
  cursor: String
  node: Message
}

# 短信配置
type Message implements Entity {
  id: Int
  sign: String
  template: String
  content: String
  notes: String
  status: String
  phones: String
  delay: Int
  config_id: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 短信配置对象
type ConfigConnection implements Pagination, Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Config]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [ConfigWrapper]
}

type ConfigWrapper implements EdgeType {
  cursor: String
  node: Config
}

# 短信配置
type Config implements Entity {
  id: String
  name: String
  sign: String
  wordLength: Int
  randomWord: String
  expires: Int
  active: Int
  retry: Int
  template: String
  identities: [Identity]
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 验证码
type Identity implements Entity {
  id: String
  sessionId: String
  value: String
  phone: String
  retry: Int
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 返回事件体
type EventBody {
  id: String
  body: String
  tag: String
}

input SubmitConfigInput {
  id: String
  name: String
  sign: String
  wordLength: Int
  randomWord: String
  expires: Int
  active: Int
  retry: Int
  template: String
}

input UpdateConfigInput {
  id: String
  name: String
  sign: String
  wordLength: Int
  randomWord: String
  expires: Int
  active: Int
  retry: Int
  template: String
}

input SubmitMessageInput {
  sign: String
  template: String
  phones: [String]
}

input SubmitEventInput {
  id: String!
  source: String
  # 标题
  title: String
  # 数据
  data: String
  # 载体
  linkers: [EventLinkInput]
  # 时间
  time: String
}

# 载体
input EventLinkInput {
  id: String
  name: String
  value: String
}

# this schema allows the following mutation:
extend type Mutation {
  submitMessage(entity: SubmitMessageInput!): Message
  submitConfig(entity: SubmitConfigInput!): Config
  upConfig(entity: UpdateConfigInput!): Config
  removeConfig(id: Int!): Int!
  # mcenter事件推送
  submitEvent(entity: SubmitEventInput!): EventBody
}

extend type Query {
  configs(offset: Int, limit: Int): [Config]
  configsConnection(page: Int, offset: Int, limit: Int, filter: String): ConfigConnection
  config(id: String!): Config
  validCaptchas(id: String!, sessionId: String!, code: String!): String
  messages(offset: Int, limit: Int): [Message]
  messagesConnection(page: Int, offset: Int, limit: Int, filter: String): MessageConnection
}

extend type Subscription {
  objectUpdate: Message
}
enum TeamType {
  # 诊所
  clinic
  # 集团
  company
  # 药房
  pharmacy
}

# 集团
type Team implements Entity {
  id: ID!
  # 编号(唯一)
  key: String
  # 类型
  type: TeamType
  # 状态
  status: String
  # 名称
  name: String
  # 描述
  description: String
  # 集团负责人
  officer: Officer
  # 拥有者
  owner: TeamOwner
  members: TeamMemberConnection
  # 角色
  role: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 集团负责人
type Officer implements Entity {
  # 负责人ID
  id: Int
  # 账号
  username: String
  # 用户类型
  userType: String
  # 昵称
  nickName: String
  # 是否启用
  enabled: Boolean
  accountNonExpired: Boolean
  accountNonLocked: Boolean
  credentialsNonExpired: Boolean
  lastLoginTime: String
  roles: [String]
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 集团拥有者
type TeamOwner implements Entity {
  # ID
  id: Int
  # 姓名
  name: String
  # 性别
  sex: String
  # 手机号
  mobile: String
  # 状态
  status: String
  # 角色
  role: String
  # 所属集团
  team: Team
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

enum EnterpriseStatus {
  # 认证
  certified
}

type Enterprise implements Entity {
  id: ID
  # 状态
  status: EnterpriseStatus
  # 公司名称
  name: String
  # 地址
  address: Address
  # 电话
  tel: String
  # 邮箱
  email: String
  # 联系人名称
  contact: String
  # 联系人电话
  contactTel: String
  # 对于的团队
  team: Team
  # 规模
  scale: String
  # 所属行业
  industry: String
  uuid: String
  creator: String
  modifier: String
  createTime(format: String): Date
  modifyTime(format: String): Date
}

type EnterpriseConnection implements Connection {
  totalCount: Int
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Enterprise]
  pageInfo: PageInfo!
  edges: [EnterpriseWrapper]
}

type EnterpriseWrapper implements EdgeType {
  cursor: String
  node: Enterprise
}

# 集团用户分页
type TeamMemberConnection implements Connection {
  totalCount: Int
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [TeamMember]
  pageInfo: PageInfo!
  edges: [TeamMemberWrapper]
}

# 集团用户
type TeamMember implements Entity {
  # 集团用户编号
  id: Int
  # 用户名
  name: String
  # 性别
  sex: String
  # 邮箱
  email: String
  # 职业
  occupation: String
  # 手机号
  mobile: String
  # 状态
  status: String
  # 集团编号
  teamId: String
  # 用户证书是否失效
  papersNumber: String
  role: String
  papersType: String
  # 身份证号
  idCard: String
  member: [Member]
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 集团分页对象
type TeamConnection implements Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [Team]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [TeamWrapper]
}

type TeamWrapper implements EdgeType {
  cursor: String
  node: Team
}

type TeamMemberWrapper implements EdgeType {
  cursor: String
  node: TeamMember
}

input SubmitTeamMemberInput {
  name: String!
  sex: String
  email: String
  mobile: String!
  papersType: String!
  papersNumber: String
  role: String
  teamId: String
}

# 新增团队
input TeamOwnerInput {
  # ID
  id: Int
  # 姓名
  name: String
  # 性别
  sex: String
  # 手机号
  mobile: String
  # 状态
  status: String
  # 角色
  role: String
}

input enterpriseInput {
  address: String
  tel: String
  email: String
  contact: String
  contact_tel: String
}

extend type Query {
  # 企业列表
  enterprises(limit: Int): [Enterprise]
  # 企业列表
  enterpriseConnection(
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): EnterpriseConnection
  # 集团分页查询
  teamConnection(
    page: Int
    type: TeamType!
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): TeamConnection
  team(id: ID!): Team
  teams(offset: Int, limit: Int, filter: String): [Team]
  teamMember(id: String!, type: String!, tid: String): TeamMember
}

extend type Mutation {
  submitTeamMember(entity: SubmitTeamMemberInput!): TeamMember
}
# 集团申请
type TeamApply implements Entity {
  id: ID!
  # 集团名称
  name: String
  # 集团简称
  abbreviation: String
  # 集团电话
  tel: String
  # 详细地址
  address: String
  # 联系人姓名
  contactName: String
  # 工作室地址
  area: Area
  # 联系人电话
  contactTel: String
  # 邀请码
  code: String
  # 简介
  summary: String
  # 备注
  remark: String
  # logo
  logo: Image
  # 审核备注 审核状态0待审核,1审核通过,2不审核通过
  approveNote: String
  # 背景图
  background: Image
  # 联系人邮箱
  email: String
  # 审批状态 审核状态0待审核,1审核通过,2不审核通过
  updateStatus: String
  # 用户名
  username: String
  # 密码
  password: String
  # 合同签约时间
  conTime: String
  # 服务时间
  serveTime: String
  # 集团规模
  scale: String
  # 所属行业
  industry: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

# 集团申请分页对象
type TeamApplyConnection implements Connection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [TeamApply]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [TeamApplyWrapper]
}

type TeamApplyWrapper implements EdgeType {
  cursor: String
  node: TeamApply
}

extend type Query {
  # 集团申请分页查询
  teamApplyConnection(
    page: Int
    pageSize: Int
    offset: Int
    limit: Int
    filters: [Filter]
    sort: Sort
  ): TeamApplyConnection
}
type UserConnection {
  count: Int
  per_page: Int
  total: Int
  page: Int
  items: [User]
  totalCount: Int
  pageInfo: PageInfo!
  edges: [UserWrapper]
}

type UserWrapper {
  cursor: String
  node: User
}

type User implements Entity {
  # 用户编号
  id: Int
  # 用户名
  username: String
  # 用户类型
  userType: String
  # 昵称
  nickName: String
  # 是否启用
  enabled: Int
  # 用户账户是否失效
  accountNonExpired: Int
  # 用户账户是否锁定
  accountNonLocked: Int
  # 用户证书是否失效
  credentialsNonExpired: Int
  # 最后一次登录时间
  lastLoginTime: String
  # 角色
  roles: [String]
  messages(page: Int, limit: Int, type: String): [UserMessage]
  messageTypes: [UserMessageType]
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

enum EmployeeStatus {
  work
  leave
}

type Employee implements Entity {
  id: ID!
  status: EmployeeStatus
  sn: String
  name: String
  birthday: Date
  sex: Sex
  mobile: String
  uuid: String
  creator: String
  modifier: String
  createTime: Date
  modifyTime: Date
}

extend type Query {
  users(offset: Int, limit: Int): [User]
  usersConnection(offset: Int, limit: Int, filter: String): UserConnection
  user(id: Int!): User
  # 员工列表
  employees(limit: Int): [Employee]
  # 查询某个员工
  employee(id: ID!): Employee
}

extend type Subscription {
}

input upUserMessageInput {
  nid: String
  uid: Int
}

# this schema allows the following mutation:
extend type Mutation {
  upUserMessage(entity: upUserMessageInput!): UserMessage
}
scalar Date

scalar Float

scalar JSON
